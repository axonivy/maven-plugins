
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ch.ivyteam.db.meta.parser.internal;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;
import org.apache.log4j.Logger;
import ch.ivyteam.db.meta.model.internal.SqlArtifact;
import ch.ivyteam.db.meta.model.internal.SqlAtom;
import ch.ivyteam.db.meta.model.internal.SqlBinaryRelation;
import ch.ivyteam.db.meta.model.internal.SqlCaseExpr;
import ch.ivyteam.db.meta.model.internal.SqlComplexCaseExpr;
import ch.ivyteam.db.meta.model.internal.SqlDataType;
import ch.ivyteam.db.meta.model.internal.SqlDatabaseSystemHint;
import ch.ivyteam.db.meta.model.internal.SqlDatabaseSystemHints;
import ch.ivyteam.db.meta.model.internal.SqlDmlStatement;
import ch.ivyteam.db.meta.model.internal.SqlForeignKey;
import ch.ivyteam.db.meta.model.internal.SqlForeignKeyAction;
import ch.ivyteam.db.meta.model.internal.SqlFullQualifiedColumnName;
import ch.ivyteam.db.meta.model.internal.SqlIndex;
import ch.ivyteam.db.meta.model.internal.SqlInsert;
import ch.ivyteam.db.meta.model.internal.SqlInsertWithValues;
import ch.ivyteam.db.meta.model.internal.SqlInsertWithSelect;
import ch.ivyteam.db.meta.model.internal.SqlLiteral;
import ch.ivyteam.db.meta.model.internal.SqlLogicalExpression;
import ch.ivyteam.db.meta.model.internal.SqlMeta;
import ch.ivyteam.db.meta.model.internal.SqlNot;
import ch.ivyteam.db.meta.model.internal.SqlNull;
import ch.ivyteam.db.meta.model.internal.SqlParent;
import ch.ivyteam.db.meta.model.internal.SqlPrimaryKey;
import ch.ivyteam.db.meta.model.internal.SqlReference;
import ch.ivyteam.db.meta.model.internal.SqlUpdateColumnExpression;
import ch.ivyteam.db.meta.model.internal.SqlSimpleExpr;
import ch.ivyteam.db.meta.model.internal.SqlTable;
import ch.ivyteam.db.meta.model.internal.SqlTableColumn;
import ch.ivyteam.db.meta.model.internal.SqlTableContentDefinition;
import ch.ivyteam.db.meta.model.internal.SqlTrigger;
import ch.ivyteam.db.meta.model.internal.SqlUniqueConstraint;
import ch.ivyteam.db.meta.model.internal.SqlUpdate;
import ch.ivyteam.db.meta.model.internal.SqlView;
import ch.ivyteam.db.meta.model.internal.SqlViewColumn;
import ch.ivyteam.db.meta.model.internal.SqlSelectExpression;
import ch.ivyteam.db.meta.model.internal.SqlSelect;
import ch.ivyteam.db.meta.model.internal.SqlWhenThen;
import ch.ivyteam.db.meta.model.internal.SqlComplexWhenThen;
import ch.ivyteam.db.meta.model.internal.SqlFunction;
import ch.ivyteam.db.meta.model.internal.SqlJoinTable;
import ch.ivyteam.db.meta.model.internal.SqlTableId;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\220\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\005\015\000\002\045\003\000\002\045\006\000" +
    "\002\046\007\000\002\043\003\000\002\043\005\000\002" +
    "\044\005\000\002\047\003\000\002\047\005\000\002\050" +
    "\005\000\002\051\003\000\002\051\005\000\002\051\010" +
    "\000\002\051\010\000\002\051\011\000\002\051\010\000" +
    "\002\051\011\000\002\051\010\000\002\051\011\000\002" +
    "\052\003\000\002\052\004\000\002\052\005\000\002\053" +
    "\003\000\002\053\005\000\002\054\003\000\002\054\005" +
    "\000\002\055\003\000\002\055\004\000\002\055\005\000" +
    "\002\056\005\000\002\056\005\000\002\056\005\000\002" +
    "\056\005\000\002\056\005\000\002\056\005\000\002\056" +
    "\005\000\002\056\006\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\060\003\000\002\060\005\000\002\061\006\000\002" +
    "\062\003\000\002\062\004\000\002\063\006\000\002\064" +
    "\006\000\002\065\003\000\002\065\004\000\002\066\006" +
    "\000\002\067\002\000\002\067\004\000\002\004\013\000" +
    "\002\011\003\000\002\011\005\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\070\031\000\002\071\003" +
    "\000\002\071\004\000\002\072\003\000\002\072\003\000" +
    "\002\013\011\000\002\033\002\000\002\033\003\000\002" +
    "\034\003\000\002\034\004\000\002\035\010\000\002\036" +
    "\003\000\002\036\005\000\002\037\004\000\002\040\002" +
    "\000\002\040\004\000\002\025\002\000\002\025\003\000" +
    "\002\025\004\000\002\026\002\000\002\026\004\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\030\002\000\002\030\003" +
    "\000\002\014\011\000\002\032\003\000\002\032\005\000" +
    "\002\015\012\000\002\031\010\000\002\016\002\000\002" +
    "\016\003\000\002\017\005\000\002\017\006\000\002\017" +
    "\006\000\002\020\011\000\002\042\002\000\002\042\003" +
    "\000\002\021\011\000\002\022\002\000\002\022\003\000" +
    "\002\023\003\000\002\023\004\000\002\024\003\000\002" +
    "\024\003\000\002\024\006\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\006\000\002\024\006\000" +
    "\002\024\010\000\002\024\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\016\000\002\010\013\000\002\073" +
    "\011\000\002\074\003\000\002\074\005\000\002\075\005" +
    "\000\002\076\002\000\002\076\004\000\002\041\003\000" +
    "\002\041\005\000\002\077\006\000\002\100\002\000\002" +
    "\100\003\000\002\100\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0149\000\010\004\uff92\005\uff92\123\015\001\002\000" +
    "\012\002\ufffc\004\ufffc\005\ufffc\123\ufffc\001\002\000\016" +
    "\002\uff81\004\uff81\005\uff81\006\uff81\103\uff81\123\uff81\001" +
    "\002\000\012\002\ufffd\004\ufffd\005\ufffd\123\ufffd\001\002" +
    "\000\016\002\uff80\004\uff80\005\uff80\006\uff80\103\uff80\123" +
    "\uff80\001\002\000\006\004\021\005\022\001\002\000\042" +
    "\004\uff91\005\uff91\006\uff91\030\uff91\031\uff91\033\uff91\034" +
    "\uff91\043\uff91\077\uff91\106\uff91\116\uff91\117\uff91\120\uff91" +
    "\121\uff91\122\uff91\123\020\001\002\000\012\002\016\004" +
    "\uff92\005\uff92\123\015\001\002\000\012\002\000\004\000" +
    "\005\000\123\000\001\002\000\012\002\ufffe\004\ufffe\005" +
    "\ufffe\123\ufffe\001\002\000\042\004\uff90\005\uff90\006\uff90" +
    "\030\uff90\031\uff90\033\uff90\034\uff90\043\uff90\077\uff90\106" +
    "\uff90\116\uff90\117\uff90\120\uff90\121\uff90\122\uff90\123\uff90" +
    "\001\002\000\004\002\001\001\002\000\012\002\uffff\004" +
    "\uffff\005\uffff\123\uffff\001\002\000\042\004\uff8f\005\uff8f" +
    "\006\uff8f\030\uff8f\031\uff8f\033\uff8f\034\uff8f\043\uff8f\077" +
    "\uff8f\106\uff8f\116\uff8f\117\uff8f\120\uff8f\121\uff8f\122\uff8f" +
    "\123\uff8f\001\002\000\006\007\262\010\263\001\002\000" +
    "\004\011\023\001\002\000\004\122\024\001\002\000\004" +
    "\111\025\001\002\000\004\122\026\001\002\000\006\112" +
    "\uff9f\114\uff9f\001\002\000\006\112\031\114\030\001\002" +
    "\000\004\122\261\001\002\000\006\012\032\053\034\001" +
    "\002\000\004\111\252\001\002\000\004\113\251\001\002" +
    "\000\022\077\uff92\106\uff92\116\uff92\117\uff92\120\uff92\121" +
    "\uff92\122\uff92\123\015\001\002\000\020\077\100\106\103" +
    "\116\076\117\101\120\077\121\066\122\073\001\002\000" +
    "\006\054\ufff4\114\ufff4\001\002\000\006\054\041\114\040" +
    "\001\002\000\022\077\uff92\106\uff92\116\uff92\117\uff92\120" +
    "\uff92\121\uff92\122\uff92\123\015\001\002\000\004\122\044" +
    "\001\002\000\024\055\054\056\uff79\061\051\063\052\064" +
    "\055\065\056\104\uff79\113\uff79\114\050\001\002\000\024" +
    "\055\ufff1\056\ufff1\061\ufff1\063\ufff1\064\ufff1\065\ufff1\104" +
    "\ufff1\113\ufff1\114\ufff1\001\002\000\032\036\uffe8\052\045" +
    "\055\uffe8\056\uffe8\061\uffe8\063\uffe8\064\uffe8\065\uffe8\104" +
    "\uffe8\113\uffe8\114\uffe8\122\046\001\002\000\004\122\047" +
    "\001\002\000\026\036\uffe7\055\uffe7\056\uffe7\061\uffe7\063" +
    "\uffe7\064\uffe7\065\uffe7\104\uffe7\113\uffe7\114\uffe7\001\002" +
    "\000\026\036\uffe6\055\uffe6\056\uffe6\061\uffe6\063\uffe6\064" +
    "\uffe6\065\uffe6\104\uffe6\113\uffe6\114\uffe6\001\002\000\004" +
    "\122\044\001\002\000\004\060\221\001\002\000\006\060" +
    "\210\062\211\001\002\000\010\056\ufff8\104\ufff8\113\ufff8" +
    "\001\002\000\024\077\100\106\103\107\072\111\070\116" +
    "\076\117\101\120\077\121\066\122\073\001\002\000\006" +
    "\060\176\062\177\001\002\000\006\060\057\062\060\001" +
    "\002\000\004\122\044\001\002\000\004\060\061\001\002" +
    "\000\004\122\044\001\002\000\004\036\063\001\002\000" +
    "\024\077\100\106\103\107\072\111\070\116\076\117\101" +
    "\120\077\121\066\122\073\001\002\000\034\055\uffe3\056" +
    "\uffe3\061\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3" +
    "\101\uffe3\104\uffe3\112\uffe3\113\uffe3\114\uffe3\001\002\000" +
    "\034\055\uffe5\056\uffe5\061\uffe5\063\uffe5\064\uffe5\065\uffe5" +
    "\066\122\067\uffe5\101\uffe5\104\uffe5\112\uffe5\113\uffe5\114" +
    "\uffe5\001\002\000\064\035\uffa4\054\uffa4\055\uffa4\056\uffa4" +
    "\061\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\070" +
    "\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4\076\uffa4" +
    "\100\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4\112\uffa4\113" +
    "\uffa4\114\uffa4\001\002\000\062\054\uffd6\055\uffd6\056\uffd6" +
    "\061\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070" +
    "\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6" +
    "\100\uffd6\101\uffd6\102\uffd6\103\uffd6\104\uffd6\112\uffd6\113" +
    "\uffd6\114\uffd6\001\002\000\024\077\100\106\103\107\072" +
    "\111\070\116\076\117\101\120\077\121\066\122\073\001" +
    "\002\000\026\055\uffe9\056\uffe9\061\uffe9\063\uffe9\064\uffe9" +
    "\065\uffe9\067\120\104\uffe9\113\uffe9\114\uffe9\001\002\000" +
    "\024\077\100\106\103\107\072\111\070\116\076\117\101" +
    "\120\077\121\066\122\073\001\002\000\066\054\uffd1\055" +
    "\uffd1\056\uffd1\061\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1" +
    "\067\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1\075" +
    "\uffd1\076\uffd1\100\uffd1\101\uffd1\102\uffd1\103\uffd1\104\uffd1" +
    "\111\162\112\uffd1\113\uffd1\114\uffd1\115\114\001\002\000" +
    "\062\054\uffd2\055\uffd2\056\uffd2\061\uffd2\063\uffd2\064\uffd2" +
    "\065\uffd2\066\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073" +
    "\uffd2\074\uffd2\075\uffd2\076\uffd2\100\uffd2\101\uffd2\102\uffd2" +
    "\103\uffd2\104\uffd2\112\uffd2\113\uffd2\114\uffd2\001\002\000" +
    "\020\070\145\071\142\072\147\073\150\074\143\075\144" +
    "\076\146\001\002\000\064\035\uffa7\054\uffa7\055\uffa7\056" +
    "\uffa7\061\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7" +
    "\070\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7\076" +
    "\uffa7\100\uffa7\101\uffa7\102\uffa7\103\uffa7\104\uffa7\112\uffa7" +
    "\113\uffa7\114\uffa7\001\002\000\064\035\uffa5\054\uffa5\055" +
    "\uffa5\056\uffa5\061\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5" +
    "\067\uffa5\070\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075" +
    "\uffa5\076\uffa5\100\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5" +
    "\112\uffa5\113\uffa5\114\uffa5\001\002\000\006\100\112\122" +
    "\113\001\002\000\064\035\uffa6\054\uffa6\055\uffa6\056\uffa6" +
    "\061\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070" +
    "\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6" +
    "\100\uffa6\101\uffa6\102\uffa6\103\uffa6\104\uffa6\112\uffa6\113" +
    "\uffa6\114\uffa6\001\002\000\062\054\uffd3\055\uffd3\056\uffd3" +
    "\061\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070" +
    "\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\075\uffd3\076\uffd3" +
    "\100\uffd3\101\uffd3\102\uffd3\103\uffd3\104\uffd3\112\uffd3\113" +
    "\uffd3\114\uffd3\001\002\000\064\035\uffa3\054\uffa3\055\uffa3" +
    "\056\uffa3\061\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\067" +
    "\uffa3\070\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3" +
    "\076\uffa3\100\uffa3\101\uffa3\102\uffa3\103\uffa3\104\uffa3\112" +
    "\uffa3\113\uffa3\114\uffa3\001\002\000\062\054\uffd4\055\uffd4" +
    "\056\uffd4\061\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4\067" +
    "\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4" +
    "\076\uffd4\100\uffd4\101\uffd4\102\uffd4\103\uffd4\104\uffd4\112" +
    "\uffd4\113\uffd4\114\uffd4\001\002\000\062\054\uffd5\055\uffd5" +
    "\056\uffd5\061\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067" +
    "\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5" +
    "\076\uffd5\100\uffd5\101\uffd5\102\uffd5\103\uffd5\104\uffd5\112" +
    "\uffd5\113\uffd5\114\uffd5\001\002\000\034\055\uffe1\056\uffe1" +
    "\061\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\101" +
    "\uffe1\104\uffe1\112\uffe1\113\uffe1\114\uffe1\001\002\000\010" +
    "\100\uffca\102\uffca\103\uffca\001\002\000\004\100\133\001" +
    "\002\000\010\100\112\102\126\103\uffc7\001\002\000\024" +
    "\077\100\106\103\107\072\111\070\116\076\117\101\120" +
    "\077\121\066\122\073\001\002\000\010\100\uffd1\103\uffd1" +
    "\115\114\001\002\000\004\122\115\001\002\000\062\054" +
    "\uffd0\055\uffd0\056\uffd0\061\uffd0\063\uffd0\064\uffd0\065\uffd0" +
    "\066\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074" +
    "\uffd0\075\uffd0\076\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0" +
    "\104\uffd0\112\uffd0\113\uffd0\114\uffd0\001\002\000\006\067" +
    "\120\101\117\001\002\000\020\077\100\106\103\116\076" +
    "\117\101\120\077\121\066\122\073\001\002\000\024\077" +
    "\100\106\103\107\072\111\070\116\076\117\101\120\077" +
    "\121\066\122\073\001\002\000\034\055\uffe4\056\uffe4\061" +
    "\uffe4\063\uffe4\064\uffe4\065\uffe4\066\122\067\uffe4\101\uffe4" +
    "\104\uffe4\112\uffe4\113\uffe4\114\uffe4\001\002\000\024\077" +
    "\100\106\103\107\072\111\070\116\076\117\101\120\077" +
    "\121\066\122\073\001\002\000\034\055\uffe2\056\uffe2\061" +
    "\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2\101\uffe2" +
    "\104\uffe2\112\uffe2\113\uffe2\114\uffe2\001\002\000\010\100" +
    "\uffc8\102\uffc8\103\uffc8\001\002\000\010\100\uffc9\102\uffc9" +
    "\103\uffc9\001\002\000\020\077\100\106\103\116\076\117" +
    "\101\120\077\121\066\122\073\001\002\000\004\103\130" +
    "\001\002\000\062\054\uffcb\055\uffcb\056\uffcb\061\uffcb\063" +
    "\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb" +
    "\072\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\100\uffcb\101" +
    "\uffcb\102\uffcb\103\uffcb\104\uffcb\112\uffcb\113\uffcb\114\uffcb" +
    "\001\002\000\004\103\uffc6\001\002\000\006\100\uffce\103" +
    "\uffce\001\002\000\014\106\103\116\076\117\101\120\077" +
    "\121\066\001\002\000\006\100\133\103\136\001\002\000" +
    "\006\100\uffcd\103\uffcd\001\002\000\062\054\uffcf\055\uffcf" +
    "\056\uffcf\061\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067" +
    "\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf" +
    "\076\uffcf\100\uffcf\101\uffcf\102\uffcf\103\uffcf\104\uffcf\112" +
    "\uffcf\113\uffcf\114\uffcf\001\002\000\004\101\140\001\002" +
    "\000\004\122\113\001\002\000\006\100\uffcc\103\uffcc\001" +
    "\002\000\020\077\100\106\103\116\076\117\101\120\077" +
    "\121\066\122\073\001\002\000\020\077\100\106\103\116" +
    "\076\117\101\120\077\121\066\122\073\001\002\000\020" +
    "\077\100\106\103\116\076\117\101\120\077\121\066\122" +
    "\073\001\002\000\020\077\100\106\103\116\076\117\101" +
    "\120\077\121\066\122\073\001\002\000\006\106\154\107" +
    "\153\001\002\000\020\077\100\106\103\116\076\117\101" +
    "\120\077\121\066\122\073\001\002\000\020\077\100\106" +
    "\103\116\076\117\101\120\077\121\066\122\073\001\002" +
    "\000\034\055\uffdb\056\uffdb\061\uffdb\063\uffdb\064\uffdb\065" +
    "\uffdb\066\uffdb\067\uffdb\101\uffdb\104\uffdb\112\uffdb\113\uffdb" +
    "\114\uffdb\001\002\000\034\055\uffdc\056\uffdc\061\uffdc\063" +
    "\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\101\uffdc\104\uffdc" +
    "\112\uffdc\113\uffdc\114\uffdc\001\002\000\004\106\155\001" +
    "\002\000\034\055\uffd8\056\uffd8\061\uffd8\063\uffd8\064\uffd8" +
    "\065\uffd8\066\uffd8\067\uffd8\101\uffd8\104\uffd8\112\uffd8\113" +
    "\uffd8\114\uffd8\001\002\000\034\055\uffd7\056\uffd7\061\uffd7" +
    "\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\101\uffd7\104" +
    "\uffd7\112\uffd7\113\uffd7\114\uffd7\001\002\000\034\055\uffde" +
    "\056\uffde\061\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067" +
    "\uffde\101\uffde\104\uffde\112\uffde\113\uffde\114\uffde\001\002" +
    "\000\034\055\uffd9\056\uffd9\061\uffd9\063\uffd9\064\uffd9\065" +
    "\uffd9\066\uffd9\067\uffd9\101\uffd9\104\uffd9\112\uffd9\113\uffd9" +
    "\114\uffd9\001\002\000\034\055\uffda\056\uffda\061\uffda\063" +
    "\uffda\064\uffda\065\uffda\066\uffda\067\uffda\101\uffda\104\uffda" +
    "\112\uffda\113\uffda\114\uffda\001\002\000\034\055\uffdd\056" +
    "\uffdd\061\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd" +
    "\101\uffdd\104\uffdd\112\uffdd\113\uffdd\114\uffdd\001\002\000" +
    "\024\077\100\106\103\112\uff74\114\uff74\116\076\117\101" +
    "\120\077\121\066\122\073\001\002\000\006\112\166\114" +
    "\165\001\002\000\006\112\uff73\114\uff73\001\002\000\020" +
    "\077\100\106\103\116\076\117\101\120\077\121\066\122" +
    "\073\001\002\000\062\054\uff75\055\uff75\056\uff75\061\uff75" +
    "\063\uff75\064\uff75\065\uff75\066\uff75\067\uff75\070\uff75\071" +
    "\uff75\072\uff75\073\uff75\074\uff75\075\uff75\076\uff75\100\uff75" +
    "\101\uff75\102\uff75\103\uff75\104\uff75\112\uff75\113\uff75\114" +
    "\uff75\001\002\000\006\112\uff72\114\uff72\001\002\000\034" +
    "\055\uffe0\056\uffe0\061\uffe0\063\uffe0\064\uffe0\065\uffe0\066" +
    "\uffe0\067\uffe0\101\uffe0\104\uffe0\112\uffe0\113\uffe0\114\uffe0" +
    "\001\002\000\006\067\120\112\172\001\002\000\034\055" +
    "\uffdf\056\uffdf\061\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf" +
    "\067\uffdf\101\uffdf\104\uffdf\112\uffdf\113\uffdf\114\uffdf\001" +
    "\002\000\004\036\174\001\002\000\024\077\100\106\103" +
    "\107\072\111\070\116\076\117\101\120\077\121\066\122" +
    "\073\001\002\000\026\055\uffea\056\uffea\061\uffea\063\uffea" +
    "\064\uffea\065\uffea\067\120\104\uffea\113\uffea\114\uffea\001" +
    "\002\000\004\122\044\001\002\000\004\060\200\001\002" +
    "\000\004\122\044\001\002\000\004\036\202\001\002\000" +
    "\024\077\100\106\103\107\072\111\070\116\076\117\101" +
    "\120\077\121\066\122\073\001\002\000\026\055\uffeb\056" +
    "\uffeb\061\uffeb\063\uffeb\064\uffeb\065\uffeb\067\120\104\uffeb" +
    "\113\uffeb\114\uffeb\001\002\000\004\036\205\001\002\000" +
    "\024\077\100\106\103\107\072\111\070\116\076\117\101" +
    "\120\077\121\066\122\073\001\002\000\026\055\uffec\056" +
    "\uffec\061\uffec\063\uffec\064\uffec\065\uffec\067\120\104\uffec" +
    "\113\uffec\114\uffec\001\002\000\012\056\uff78\067\120\104" +
    "\uff78\113\uff78\001\002\000\004\122\044\001\002\000\004" +
    "\060\212\001\002\000\004\122\044\001\002\000\004\036" +
    "\214\001\002\000\024\077\100\106\103\107\072\111\070" +
    "\116\076\117\101\120\077\121\066\122\073\001\002\000" +
    "\026\055\uffed\056\uffed\061\uffed\063\uffed\064\uffed\065\uffed" +
    "\067\120\104\uffed\113\uffed\114\uffed\001\002\000\004\036" +
    "\217\001\002\000\024\077\100\106\103\107\072\111\070" +
    "\116\076\117\101\120\077\121\066\122\073\001\002\000" +
    "\026\055\uffee\056\uffee\061\uffee\063\uffee\064\uffee\065\uffee" +
    "\067\120\104\uffee\113\uffee\114\uffee\001\002\000\004\122" +
    "\044\001\002\000\004\036\223\001\002\000\024\077\100" +
    "\106\103\107\072\111\070\116\076\117\101\120\077\121" +
    "\066\122\073\001\002\000\026\055\uffef\056\uffef\061\uffef" +
    "\063\uffef\064\uffef\065\uffef\067\120\104\uffef\113\uffef\114" +
    "\uffef\001\002\000\024\055\ufff0\056\ufff0\061\ufff0\063\ufff0" +
    "\064\ufff0\065\ufff0\104\ufff0\113\ufff0\114\ufff0\001\002\000" +
    "\006\054\ufff3\114\ufff3\001\002\000\010\054\uffb6\104\232" +
    "\114\uffb6\001\002\000\006\054\ufff2\114\ufff2\001\002\000" +
    "\014\054\uffb5\104\232\112\uffb5\113\uffb5\114\uffb5\001\002" +
    "\000\004\122\234\001\002\000\014\054\uffb4\104\uffb4\112" +
    "\uffb4\113\uffb4\114\uffb4\001\002\000\004\105\235\001\002" +
    "\000\004\111\236\001\002\000\004\122\240\001\002\000" +
    "\006\112\uffb1\114\uffb1\001\002\000\010\070\245\112\uffae" +
    "\114\uffae\001\002\000\006\112\243\114\242\001\002\000" +
    "\004\122\240\001\002\000\014\054\uffb2\104\uffb2\112\uffb2" +
    "\113\uffb2\114\uffb2\001\002\000\006\112\uffb0\114\uffb0\001" +
    "\002\000\004\116\247\001\002\000\006\112\uffaf\114\uffaf" +
    "\001\002\000\006\112\uffad\114\uffad\001\002\000\014\054" +
    "\uffb3\104\uffb3\112\uffb3\113\uffb3\114\uffb3\001\002\000\016" +
    "\002\uff7e\004\uff7e\005\uff7e\006\uff7e\103\uff7e\123\uff7e\001" +
    "\002\000\014\106\103\116\076\117\101\120\077\121\066" +
    "\001\002\000\006\112\256\114\255\001\002\000\006\112" +
    "\uff77\114\uff77\001\002\000\014\106\103\116\076\117\101" +
    "\120\077\121\066\001\002\000\004\113\257\001\002\000" +
    "\016\002\uff7f\004\uff7f\005\uff7f\006\uff7f\103\uff7f\123\uff7f" +
    "\001\002\000\006\112\uff76\114\uff76\001\002\000\006\112" +
    "\uff9e\114\uff9e\001\002\000\004\122\306\001\002\000\004" +
    "\122\264\001\002\000\004\111\265\001\002\000\006\122" +
    "\uff92\123\015\001\002\000\004\122\304\001\002\000\006" +
    "\112\ufff7\114\ufff7\001\002\000\006\112\272\114\271\001" +
    "\002\000\006\122\uff92\123\015\001\002\000\004\052\273" +
    "\001\002\000\004\053\034\001\002\000\010\056\277\104" +
    "\232\113\uffb6\001\002\000\010\056\ufffa\104\ufffa\113\ufffa" +
    "\001\002\000\004\113\302\001\002\000\004\057\300\001" +
    "\002\000\004\053\034\001\002\000\010\056\ufff9\104\ufff9" +
    "\113\ufff9\001\002\000\012\002\ufffb\004\ufffb\005\ufffb\123" +
    "\ufffb\001\002\000\006\112\ufff6\114\ufff6\001\002\000\010" +
    "\104\232\112\uffb6\114\uffb6\001\002\000\006\112\ufff5\114" +
    "\ufff5\001\002\000\004\111\307\001\002\000\020\030\uff92" +
    "\031\uff92\033\uff92\034\uff92\043\uff92\122\uff92\123\015\001" +
    "\002\000\006\112\uffc2\114\uffc2\001\002\000\006\112\uffbf" +
    "\114\uffbf\001\002\000\016\030\327\031\326\033\332\034" +
    "\330\043\333\122\331\001\002\000\006\112\uffbe\114\uffbe" +
    "\001\002\000\006\112\uffc0\114\uffc0\001\002\000\006\112" +
    "\uffc1\114\uffc1\001\002\000\006\112\uffc4\114\uffc4\001\002" +
    "\000\006\112\322\114\321\001\002\000\006\112\uffbd\114" +
    "\uffbd\001\002\000\020\030\uff92\031\uff92\033\uff92\034\uff92" +
    "\043\uff92\122\uff92\123\015\001\002\000\006\104\232\113" +
    "\uffb6\001\002\000\004\113\324\001\002\000\012\002\uffc5" +
    "\004\uffc5\005\uffc5\123\uffc5\001\002\000\006\112\uffc3\114" +
    "\uffc3\001\002\000\004\032\u0146\001\002\000\004\032\u0141" +
    "\001\002\000\006\111\uff95\122\334\001\002\000\034\013" +
    "\u010a\014\u010e\015\u0110\016\u010d\017\u0113\020\u0112\021\u0114" +
    "\022\u0108\023\u010b\024\u010c\025\u010f\026\u0109\027\u0115\001" +
    "\002\000\006\111\uff95\122\334\001\002\000\006\044\uff95" +
    "\122\334\001\002\000\010\040\uff94\044\uff94\111\uff94\001" +
    "\002\000\004\044\336\001\002\000\004\037\337\001\002" +
    "\000\004\036\340\001\002\000\004\122\341\001\002\000" +
    "\004\046\342\001\002\000\004\104\343\001\002\000\004" +
    "\047\344\001\002\000\004\050\345\001\002\000\004\045" +
    "\346\001\002\000\010\005\uff92\006\uff92\123\015\001\002" +
    "\000\012\005\uffb9\006\uffb9\103\uffb9\123\uffb9\001\002\000" +
    "\006\005\022\006\367\001\002\000\012\005\uffb8\006\uffb8" +
    "\103\uffb8\123\uffb8\001\002\000\012\005\uffbb\006\uffbb\103" +
    "\uffbb\123\uffbb\001\002\000\012\005\uff92\006\uff92\103\355" +
    "\123\015\001\002\000\012\005\uffba\006\uffba\103\uffba\123" +
    "\uffba\001\002\000\004\067\356\001\002\000\004\046\357" +
    "\001\002\000\004\104\360\001\002\000\004\047\361\001" +
    "\002\000\004\051\362\001\002\000\004\045\363\001\002" +
    "\000\010\005\uff92\006\uff92\123\015\001\002\000\012\005" +
    "\uff92\006\uff92\103\365\123\015\001\002\000\010\104\232" +
    "\112\uffb6\114\uffb6\001\002\000\006\112\uffbc\114\uffbc\001" +
    "\002\000\006\040\uff95\122\334\001\002\000\004\040\371" +
    "\001\002\000\004\122\372\001\002\000\004\070\u0101\001" +
    "\002\000\010\055\054\113\uff79\114\375\001\002\000\010" +
    "\055\uff7c\113\uff7c\114\uff7c\001\002\000\004\122\372\001" +
    "\002\000\004\113\377\001\002\000\012\005\uff7d\006\uff7d" +
    "\103\uff7d\123\uff7d\001\002\000\010\055\uff7b\113\uff7b\114" +
    "\uff7b\001\002\000\020\077\100\106\103\116\076\117\101" +
    "\120\077\121\066\122\073\001\002\000\010\055\uff7a\113" +
    "\uff7a\114\uff7a\001\002\000\004\111\u0104\001\002\000\004" +
    "\122\026\001\002\000\006\112\u0106\114\030\001\002\000" +
    "\010\104\232\112\uffb6\114\uffb6\001\002\000\006\112\uff96" +
    "\114\uff96\001\002\000\020\035\uff88\104\uff88\106\uff88\107" +
    "\uff88\110\uff88\112\uff88\114\uff88\001\002\000\004\111\u0137" +
    "\001\002\000\020\035\uff8e\104\uff8e\106\uff8e\107\uff8e\110" +
    "\uff8e\112\uff8e\114\uff8e\001\002\000\020\035\uff87\104\uff87" +
    "\106\uff87\107\uff87\110\uff87\112\uff87\114\uff87\001\002\000" +
    "\020\035\uff86\104\uff86\106\uff86\107\uff86\110\uff86\112\uff86" +
    "\114\uff86\001\002\000\020\035\uff8b\104\uff8b\106\uff8b\107" +
    "\uff8b\110\uff8b\112\uff8b\114\uff8b\001\002\000\020\035\uff8d" +
    "\104\uff8d\106\uff8d\107\uff8d\110\uff8d\112\uff8d\114\uff8d\001" +
    "\002\000\004\111\u0134\001\002\000\004\111\u0131\001\002" +
    "\000\020\035\uffac\104\uffac\106\u011b\107\u011a\110\uffac\112" +
    "\uffac\114\uffac\001\002\000\020\035\uff89\104\uff89\106\uff89" +
    "\107\uff89\110\uff89\112\uff89\114\uff89\001\002\000\020\035" +
    "\uff8a\104\uff8a\106\uff8a\107\uff8a\110\uff8a\112\uff8a\114\uff8a" +
    "\001\002\000\004\111\u0116\001\002\000\020\035\uff82\104" +
    "\uff82\106\uff82\107\uff82\110\uff82\112\uff82\114\uff82\001\002" +
    "\000\004\117\u0117\001\002\000\004\112\u0118\001\002\000" +
    "\020\035\uff85\104\uff85\106\uff85\107\uff85\110\uff85\112\uff85" +
    "\114\uff85\001\002\000\014\035\uffa9\104\uffa9\110\u011d\112" +
    "\uffa9\114\uffa9\001\002\000\004\106\u011c\001\002\000\014" +
    "\035\uffab\104\uffab\110\uffab\112\uffab\114\uffab\001\002\000" +
    "\014\035\uffaa\104\uffaa\110\uffaa\112\uffaa\114\uffaa\001\002" +
    "\000\014\106\103\116\076\117\101\120\077\121\066\001" +
    "\002\000\012\035\u0121\104\uffa2\112\uffa2\114\uffa2\001\002" +
    "\000\010\104\232\112\uffb6\114\uffb6\001\002\000\010\104" +
    "\uffa1\112\uffa1\114\uffa1\001\002\000\004\122\u0122\001\002" +
    "\000\004\111\u0123\001\002\000\004\122\u0124\001\002\000" +
    "\004\112\u0125\001\002\000\012\036\u0127\104\uff9b\112\uff9b" +
    "\114\uff9b\001\002\000\010\104\uff9a\112\uff9a\114\uff9a\001" +
    "\002\000\004\037\u0129\001\002\000\010\104\uff9c\112\uff9c" +
    "\114\uff9c\001\002\000\010\040\u012b\041\u012c\042\u012a\001" +
    "\002\000\004\041\u012e\001\002\000\004\106\u012d\001\002" +
    "\000\010\104\uff99\112\uff99\114\uff99\001\002\000\010\104" +
    "\uff98\112\uff98\114\uff98\001\002\000\010\104\uff97\112\uff97" +
    "\114\uff97\001\002\000\006\112\uffb7\114\uffb7\001\002\000" +
    "\012\035\uffa8\104\uffa8\112\uffa8\114\uffa8\001\002\000\004" +
    "\117\u0132\001\002\000\004\112\u0133\001\002\000\020\035" +
    "\uff8c\104\uff8c\106\uff8c\107\uff8c\110\uff8c\112\uff8c\114\uff8c" +
    "\001\002\000\004\117\u0135\001\002\000\004\112\u0136\001" +
    "\002\000\020\035\uff84\104\uff84\106\uff84\107\uff84\110\uff84" +
    "\112\uff84\114\uff84\001\002\000\004\117\u0138\001\002\000" +
    "\004\114\u0139\001\002\000\004\117\u013a\001\002\000\004" +
    "\112\u013b\001\002\000\020\035\uff83\104\uff83\106\uff83\107" +
    "\uff83\110\uff83\112\uff83\114\uff83\001\002\000\004\111\u013d" +
    "\001\002\000\004\122\026\001\002\000\006\112\u013f\114" +
    "\030\001\002\000\010\104\232\112\uffb6\114\uffb6\001\002" +
    "\000\006\112\uff93\114\uff93\001\002\000\004\111\u0142\001" +
    "\002\000\004\122\026\001\002\000\006\112\u0144\114\030" +
    "\001\002\000\010\104\232\112\uffb6\114\uffb6\001\002\000" +
    "\006\112\uffa0\114\uffa0\001\002\000\004\111\u0147\001\002" +
    "\000\004\122\u0148\001\002\000\004\112\u0149\001\002\000" +
    "\004\035\u0121\001\002\000\010\104\232\112\uffb6\114\uffb6" +
    "\001\002\000\006\112\uff9d\114\uff9d\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0149\000\024\002\011\003\012\004\013\005\003\006" +
    "\005\007\006\010\004\022\007\023\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\016" +
    "\004\013\005\003\006\005\007\006\010\004\022\007\023" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\022" +
    "\034\023\010\047\036\050\035\001\001\000\016\027\101" +
    "\057\226\060\066\061\104\064\103\077\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\034\023\010" +
    "\050\225\001\001\000\006\051\041\052\042\001\001\000" +
    "\004\076\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\027\101\053\206\054\064\055" +
    "\063\056\105\057\074\060\066\061\104\064\103\077\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\172\001\001\000\002\001\001\000\004\052\061\001\001" +
    "\000\002\001\001\000\026\027\101\053\070\054\064\055" +
    "\063\056\105\057\074\060\066\061\104\064\103\077\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\027\101\053\170\054\064" +
    "\055\063\056\105\057\074\060\066\061\104\064\103\077" +
    "\073\001\001\000\002\001\001\000\022\027\101\055\167" +
    "\056\105\057\074\060\066\061\104\064\103\077\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\060\107\065" +
    "\110\066\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\062\133\063\131" +
    "\001\001\000\006\066\124\067\126\001\001\000\026\027" +
    "\101\053\115\054\064\055\063\056\105\057\074\060\066" +
    "\061\104\064\103\077\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\027\101\057\123\060\066\061\104\064\103\077\073\001" +
    "\001\000\024\027\101\054\120\055\063\056\105\057\074" +
    "\060\066\061\104\064\103\077\073\001\001\000\002\001" +
    "\001\000\022\027\101\055\122\056\105\057\074\060\066" +
    "\061\104\064\103\077\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\027\101\057\130" +
    "\060\066\061\104\064\103\077\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\136\001\001\000\004\063\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\140\001\001\000\002\001\001\000\016\027\101\057" +
    "\160\060\066\061\104\064\103\077\073\001\001\000\016" +
    "\027\101\057\157\060\066\061\104\064\103\077\073\001" +
    "\001\000\016\027\101\057\156\060\066\061\104\064\103" +
    "\077\073\001\001\000\016\027\101\057\155\060\066\061" +
    "\104\064\103\077\073\001\001\000\002\001\001\000\016" +
    "\027\101\057\151\060\066\061\104\064\103\077\073\001" +
    "\001\000\016\027\101\057\150\060\066\061\104\064\103" +
    "\077\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\027\101\057\163\060\066\061\104\064\103" +
    "\077\073\100\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\027\101\057\166\060\066\061\104\064\103" +
    "\077\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\027\101\053\174\054\064\055\063\056" +
    "\105\057\074\060\066\061\104\064\103\077\073\001\001" +
    "\000\002\001\001\000\004\052\203\001\001\000\002\001" +
    "\001\000\004\052\200\001\001\000\002\001\001\000\026" +
    "\027\101\053\202\054\064\055\063\056\105\057\074\060" +
    "\066\061\104\064\103\077\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\027\101\053\205\054\064\055" +
    "\063\056\105\057\074\060\066\061\104\064\103\077\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\215\001\001\000\002\001\001\000\004\052\212\001\001" +
    "\000\002\001\001\000\026\027\101\053\214\054\064\055" +
    "\063\056\105\057\074\060\066\061\104\064\103\077\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\027" +
    "\101\053\217\054\064\055\063\056\105\057\074\060\066" +
    "\061\104\064\103\077\073\001\001\000\002\001\001\000" +
    "\004\052\221\001\001\000\002\001\001\000\026\027\101" +
    "\053\223\054\064\055\063\056\105\057\074\060\066\061" +
    "\104\064\103\077\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\033\227\034\230\035" +
    "\232\001\001\000\002\001\001\000\004\035\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\036\240\037\236\001\001\000\002" +
    "\001\001\000\004\040\245\001\001\000\002\001\001\000" +
    "\004\037\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\253\041\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\022\265\023\010\043\267" +
    "\044\266\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\022\265\023\010\044\302\001\001" +
    "\000\002\001\001\000\006\045\273\046\274\001\001\000" +
    "\010\033\275\034\230\035\232\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\033\304\034\230\035\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\011\316\012\315\013\307" +
    "\014\314\015\313\020\310\021\312\022\311\023\010\070" +
    "\317\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\012\324\013\307\014\314\015\313\020\310\021" +
    "\312\022\311\023\010\070\317\001\001\000\010\033\322" +
    "\034\230\035\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\u013b\001\001\000\004\024\u0110\001\001\000" +
    "\004\042\u0102\001\001\000\004\042\334\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\346\007\006\010\004\022\347\023\010\071\352" +
    "\072\351\073\350\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\006\346" +
    "\007\006\010\004\022\347\023\010\072\353\073\350\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\006\346\007\006\010\004\022\347" +
    "\023\010\071\363\072\351\073\350\001\001\000\020\006" +
    "\346\007\006\010\004\022\347\023\010\072\353\073\350" +
    "\001\001\000\010\033\365\034\230\035\232\001\001\000" +
    "\002\001\001\000\004\042\367\001\001\000\002\001\001" +
    "\000\006\074\372\075\373\001\001\000\002\001\001\000" +
    "\004\076\375\001\001\000\002\001\001\000\004\075\377" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\027\101\057\u0101\060\066\061\104\064\103" +
    "\077\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\u0104\001\001\000\002\001\001\000\010\033\u0106" +
    "\034\230\035\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\u0118\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\u011d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\u012f\001\001" +
    "\000\006\030\u011e\031\u011f\001\001\000\010\033\u012e\034" +
    "\230\035\232\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\u0127\017\u0125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\u013d\001" +
    "\001\000\002\001\001\000\010\033\u013f\034\230\035\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\u0142\001\001\000\002\001\001\000\010\033\u0144\034\230" +
    "\035\232\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\u0149\001\001" +
    "\000\010\033\u014a\034\230\035\232\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  @SuppressWarnings("all")
   
  /** The logger to use */ 
  private static final Logger logger = Logger.getLogger(Parser.class.getPackage().getName());
  
  /** The syntax errors */
  private List<SyntaxError> errors = new ArrayList<SyntaxError>();
  
  /** Error Message */
  private static final String UNEXPECTED_SYMBOL_WITH_VALUE="Unexcepted Symbol {0} ''{1}''";
  
  /** Error Message */
  private static final String UNEXPECTED_SYMBOL="Unexcepted Symbol {0}";
  
  /** Error Message */  
  private static final String UNRECOVERED_SYNTAX_ERROR = "Unrecovered Syntax Error";
  
  /** Error Message */  
  private static final String SYNTAX_ERROR = "Syntax Error";
  
  /**
   * @see java_cup.runtime.lr_parser#syntax_error(java_cup.runtime.Symbol)
   */
  @Override
  public void syntax_error(Symbol _cur_token)
  {
    logger.debug("Syntax error on symbol "+_cur_token);
    if (_cur_token.value != null)
    {
      errors.add(new SyntaxError(UNEXPECTED_SYMBOL_WITH_VALUE, (TerminalSymbol)_cur_token));
    }
    else
    {
      errors.add(new SyntaxError(UNEXPECTED_SYMBOL, (TerminalSymbol)_cur_token));
    }
  }
  
  /**
   * Adds an error to the error list.
   * @param syntaxError some syntax error,
   */
  void addError(SyntaxError syntaxError)
  {
    errors.add(syntaxError);
  }
  
  /**
   * @see java_cup.runtime.lr_parser#unrecovered_syntax_error(java_cup.runtime.Symbol)
   */
  @Override
  public void unrecovered_syntax_error(Symbol _cur_token) throws Exception
  {
    logger.debug("Unrecovered syntax error on symbol " + _cur_token);
    throw new MetaParserException(UNRECOVERED_SYNTAX_ERROR, errors);
  }
  
  /**
   * @see java_cup.runtime.lr_parser#parse()
   */
  @Override
  public Symbol parse() throws Exception
  {
    Symbol symbol;
    errors.clear();
    symbol = super.parse();
    if (errors.size()>0)
    {
      throw new MetaParserException(SYNTAX_ERROR, errors);
    }    
    return symbol;
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Meta EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SqlMeta start_val = (SqlMeta)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Meta ::= Artifact 
            {
              SqlMeta RESULT =null;
		int artifactleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int artifactright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlArtifact artifact = (SqlArtifact)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
         RESULT = new SqlMeta();
         RESULT.addArtifact(artifact); 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Meta",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Meta ::= Meta Artifact 
            {
              SqlMeta RESULT =null;
		int metaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int metaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SqlMeta meta = (SqlMeta)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int artifactleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int artifactright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlArtifact artifact = (SqlArtifact)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         meta.addArtifact(artifact);
         RESULT = meta;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Meta",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Artifact ::= Table 
            {
              SqlArtifact RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlTable table = (SqlTable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = table;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Artifact",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Artifact ::= Insert 
            {
              SqlArtifact RESULT =null;
		int insertleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insertright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlInsert insert = (SqlInsert)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = insert;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Artifact",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Artifact ::= View 
            {
              SqlArtifact RESULT =null;
		int viewleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int viewright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlView view = (SqlView)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = view;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Artifact",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // View ::= CommentsOpt CREATE VIEW IDENTIFIER L_PARENT ViewColumnList R_PARENT AS SelectList DatabaseSystemsHintsOpt SEMICOLON 
            {
              SqlView RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int columnsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int columnsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<SqlViewColumn> columns = (List<SqlViewColumn>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int selectsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int selectsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<SqlSelect> selects = (List<SqlSelect>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dbSysHintsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dbSysHintsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<SqlDatabaseSystemHints> dbSysHints = (List<SqlDatabaseSystemHints>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
          RESULT = new SqlView(id, columns, selects, dbSysHints, comment);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("View",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SelectList ::= Select 
            {
              List<SqlSelect> RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlSelect select = (SqlSelect)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new ArrayList();
           RESULT.add(select);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SelectList",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SelectList ::= SelectList UNION ALL Select 
            {
              List<SqlSelect> RESULT =null;
		int selectsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int selectsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<SqlSelect> selects = (List<SqlSelect>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int selectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlSelect select = (SqlSelect)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = selects;
          RESULT.add(select);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SelectList",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Select ::= SELECT SelectExpressionList FROM JoinTableList WhereOpt 
            {
              SqlSelect RESULT =null;
		int expressionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expressionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<SqlSelectExpression> expressions = (List<SqlSelectExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int joinTableListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int joinTableListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<SqlJoinTable> joinTableList = (List<SqlJoinTable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlSimpleExpr condition = (SqlSimpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new SqlSelect(expressions, joinTableList, condition);
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Select",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ViewColumnList ::= ViewColumn 
            {
              List<SqlViewColumn> RESULT =null;
		int columnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int columnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlViewColumn column = (SqlViewColumn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ArrayList();
            RESULT.add(column);
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ViewColumnList",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ViewColumnList ::= ViewColumnList COMMA ViewColumn 
            {
              List<SqlViewColumn> RESULT =null;
		int columnsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int columnsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<SqlViewColumn> columns = (List<SqlViewColumn>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int columnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int columnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlViewColumn column = (SqlViewColumn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = columns;
           RESULT.add(column);
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ViewColumnList",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ViewColumn ::= CommentsOpt IDENTIFIER DatabaseSystemsHintsOpt 
            {
              SqlViewColumn RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dbSysHintsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dbSysHintsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<SqlDatabaseSystemHints> dbSysHints = (List<SqlDatabaseSystemHints>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new SqlViewColumn(id, dbSysHints, comment);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ViewColumn",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SelectExpressionList ::= SelectExpression 
            {
              List<SqlSelectExpression> RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlSelectExpression expression = (SqlSelectExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       RESULT = new ArrayList();
       RESULT.add(expression);
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SelectExpressionList",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SelectExpressionList ::= SelectExpressionList COMMA SelectExpression 
            {
              List<SqlSelectExpression> RESULT =null;
		int expressionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expressionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<SqlSelectExpression> expressions = (List<SqlSelectExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlSelectExpression expression = (SqlSelectExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       RESULT = expressions;
       RESULT.add(expression);
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SelectExpressionList",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SelectExpression ::= CommentsOpt Atom DatabaseSystemsHintsOpt 
            {
              SqlSelectExpression RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int atomleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SqlAtom atom = (SqlAtom)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dbSysHintsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dbSysHintsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<SqlDatabaseSystemHints> dbSysHints = (List<SqlDatabaseSystemHints>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new SqlSelectExpression(atom, dbSysHints, comment);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SelectExpression",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // JoinTableList ::= TableId 
            {
              List<SqlJoinTable> RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlTableId table = (SqlTableId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new ArrayList();
        RESULT.add(new SqlJoinTable(table));
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JoinTableList",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // JoinTableList ::= JoinTableList COMMA TableId 
            {
              List<SqlJoinTable> RESULT =null;
		int tablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<SqlJoinTable> tables = (List<SqlJoinTable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlTableId table = (SqlTableId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       RESULT = tables;
       RESULT.add(new SqlJoinTable(table));
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JoinTableList",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // JoinTableList ::= JoinTableList INNER JOIN TableId ON LogicalExpression 
            {
              List<SqlJoinTable> RESULT =null;
		int tablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<SqlJoinTable> tables = (List<SqlJoinTable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SqlTableId table = (SqlTableId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int joinExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int joinExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlSimpleExpr joinExpression = (SqlSimpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = tables;
        RESULT.add(new SqlJoinTable(table, "INNER JOIN", joinExpression));
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JoinTableList",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // JoinTableList ::= JoinTableList LEFT JOIN TableId ON LogicalExpression 
            {
              List<SqlJoinTable> RESULT =null;
		int tablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<SqlJoinTable> tables = (List<SqlJoinTable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SqlTableId table = (SqlTableId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int joinExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int joinExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlSimpleExpr joinExpression = (SqlSimpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = tables;
        RESULT.add(new SqlJoinTable(table, "LEFT JOIN", joinExpression));
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JoinTableList",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // JoinTableList ::= JoinTableList LEFT OUTER JOIN TableId ON LogicalExpression 
            {
              List<SqlJoinTable> RESULT =null;
		int tablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<SqlJoinTable> tables = (List<SqlJoinTable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SqlTableId table = (SqlTableId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int joinExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int joinExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlSimpleExpr joinExpression = (SqlSimpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = tables;
        RESULT.add(new SqlJoinTable(table, "LEFT OUTER JOIN", joinExpression));
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JoinTableList",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // JoinTableList ::= JoinTableList RIGHT JOIN TableId ON LogicalExpression 
            {
              List<SqlJoinTable> RESULT =null;
		int tablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<SqlJoinTable> tables = (List<SqlJoinTable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SqlTableId table = (SqlTableId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int joinExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int joinExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlSimpleExpr joinExpression = (SqlSimpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = tables;
        RESULT.add(new SqlJoinTable(table, "RIGHT JOIN", joinExpression));
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JoinTableList",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // JoinTableList ::= JoinTableList RIGHT OUTER JOIN TableId ON LogicalExpression 
            {
              List<SqlJoinTable> RESULT =null;
		int tablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<SqlJoinTable> tables = (List<SqlJoinTable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SqlTableId table = (SqlTableId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int joinExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int joinExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlSimpleExpr joinExpression = (SqlSimpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = tables;
        RESULT.add(new SqlJoinTable(table, "RIGHT OUTER JOIN", joinExpression));
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JoinTableList",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // JoinTableList ::= JoinTableList FULL JOIN TableId ON LogicalExpression 
            {
              List<SqlJoinTable> RESULT =null;
		int tablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<SqlJoinTable> tables = (List<SqlJoinTable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SqlTableId table = (SqlTableId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int joinExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int joinExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlSimpleExpr joinExpression = (SqlSimpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = tables;
        RESULT.add(new SqlJoinTable(table, "FULL JOIN", joinExpression));
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JoinTableList",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // JoinTableList ::= JoinTableList FULL OUTER JOIN TableId ON LogicalExpression 
            {
              List<SqlJoinTable> RESULT =null;
		int tablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<SqlJoinTable> tables = (List<SqlJoinTable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SqlTableId table = (SqlTableId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int joinExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int joinExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlSimpleExpr joinExpression = (SqlSimpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = tables;
        RESULT.add(new SqlJoinTable(table, "FULL OUTER JOIN", joinExpression));
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JoinTableList",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TableId ::= IDENTIFIER 
            {
              SqlTableId RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String table = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new SqlTableId(table);
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TableId",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TableId ::= IDENTIFIER IDENTIFIER 
            {
              SqlTableId RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String table = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new SqlTableId(table, alias);
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TableId",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TableId ::= IDENTIFIER AS IDENTIFIER 
            {
              SqlTableId RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String table = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new SqlTableId(table, alias);
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TableId",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LogicalExpression ::= AndExpression 
            {
              SqlSimpleExpr RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlSimpleExpr and = (SqlSimpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = and;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LogicalExpression ::= LogicalExpression OR AndExpression 
            {
              SqlSimpleExpr RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SqlSimpleExpr first = (SqlSimpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlSimpleExpr second = (SqlSimpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new SqlLogicalExpression(first, "OR", second); 
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalExpression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AndExpression ::= SimpleExpr 
            {
              SqlSimpleExpr RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlSimpleExpr expr = (SqlSimpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = expr;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AndExpression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AndExpression ::= AndExpression AND SimpleExpr 
            {
              SqlSimpleExpr RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SqlSimpleExpr first = (SqlSimpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlSimpleExpr second = (SqlSimpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new SqlLogicalExpression(first, "AND", second);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AndExpression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SimpleExpr ::= BinaryRelation 
            {
              SqlSimpleExpr RESULT =null;
		int binRelationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int binRelationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlBinaryRelation binRelation = (SqlBinaryRelation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = binRelation;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleExpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SimpleExpr ::= NOT SimpleExpr 
            {
              SqlSimpleExpr RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlSimpleExpr expr = (SqlSimpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new SqlNot(expr);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleExpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SimpleExpr ::= L_PARENT LogicalExpression R_PARENT 
            {
              SqlSimpleExpr RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SqlSimpleExpr expr = (SqlSimpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new SqlParent(expr);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleExpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BinaryRelation ::= Atom EQUAL Atom 
            {
              SqlBinaryRelation RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SqlAtom first = (SqlAtom)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlAtom second = (SqlAtom)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       RESULT = new SqlBinaryRelation(first, "=", second);
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryRelation",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BinaryRelation ::= Atom NOT_EQUAL Atom 
            {
              SqlBinaryRelation RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SqlAtom first = (SqlAtom)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlAtom second = (SqlAtom)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       RESULT = new SqlBinaryRelation(first, "<>", second);
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryRelation",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BinaryRelation ::= Atom LESS Atom 
            {
              SqlBinaryRelation RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SqlAtom first = (SqlAtom)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlAtom second = (SqlAtom)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       RESULT = new SqlBinaryRelation(first, "<", second);
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryRelation",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BinaryRelation ::= Atom LESS_EQUAL Atom 
            {
              SqlBinaryRelation RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SqlAtom first = (SqlAtom)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlAtom second = (SqlAtom)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new SqlBinaryRelation(first, "<=", second);
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryRelation",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BinaryRelation ::= Atom GREATER Atom 
            {
              SqlBinaryRelation RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SqlAtom first = (SqlAtom)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlAtom second = (SqlAtom)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         RESULT = new SqlBinaryRelation(first, ">", second);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryRelation",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BinaryRelation ::= Atom GREATER_EQUAL Atom 
            {
              SqlBinaryRelation RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SqlAtom first = (SqlAtom)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlAtom second = (SqlAtom)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         RESULT = new SqlBinaryRelation(first, ">=", second);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryRelation",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BinaryRelation ::= Atom IS NULL 
            {
              SqlBinaryRelation RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SqlAtom first = (SqlAtom)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
         RESULT = new SqlBinaryRelation(first, "IS", new SqlLiteral(SqlNull.getInstance())); 
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryRelation",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BinaryRelation ::= Atom IS NOT NULL 
            {
              SqlBinaryRelation RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SqlAtom first = (SqlAtom)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
         RESULT = new SqlBinaryRelation(first, "IS NOT", new SqlLiteral(SqlNull.getInstance()));
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryRelation",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Atom ::= FullQualifiedColumnName 
            {
              SqlAtom RESULT =null;
		int fqColumnNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fqColumnNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlFullQualifiedColumnName fqColumnName = (SqlFullQualifiedColumnName)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = fqColumnName;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atom",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Atom ::= CaseExpr 
            {
              SqlAtom RESULT =null;
		int caseExprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caseExprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlCaseExpr caseExpr = (SqlCaseExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = caseExpr;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atom",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Atom ::= ComplexCaseExpr 
            {
              SqlAtom RESULT =null;
		int complexCaseExprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int complexCaseExprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlComplexCaseExpr complexCaseExpr = (SqlComplexCaseExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = complexCaseExpr;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atom",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Atom ::= Literal 
            {
              SqlAtom RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlLiteral lit = (SqlLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = lit;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atom",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Atom ::= Function 
            {
              SqlAtom RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlFunction function = (SqlFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT= function;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atom",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FullQualifiedColumnName ::= IDENTIFIER 
            {
              SqlFullQualifiedColumnName RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new SqlFullQualifiedColumnName(null, id); 
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FullQualifiedColumnName",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FullQualifiedColumnName ::= IDENTIFIER DOT IDENTIFIER 
            {
              SqlFullQualifiedColumnName RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String table = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int columnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int columnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String column = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new SqlFullQualifiedColumnName(table, column);
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FullQualifiedColumnName",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CaseExpr ::= CASE FullQualifiedColumnName WhenThenList END 
            {
              SqlCaseExpr RESULT =null;
		int fqColumnNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fqColumnNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SqlFullQualifiedColumnName fqColumnName = (SqlFullQualifiedColumnName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int whenThenListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int whenThenListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<SqlWhenThen> whenThenList = (List<SqlWhenThen>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new SqlCaseExpr(fqColumnName, whenThenList);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CaseExpr",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // WhenThenList ::= WhenThen 
            {
              List<SqlWhenThen> RESULT =null;
		int whenThenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int whenThenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlWhenThen whenThen = (SqlWhenThen)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new ArrayList();
        RESULT.add(whenThen);     
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhenThenList",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // WhenThenList ::= WhenThenList WhenThen 
            {
              List<SqlWhenThen> RESULT =null;
		int whenThenListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int whenThenListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<SqlWhenThen> whenThenList = (List<SqlWhenThen>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int whenThenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int whenThenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlWhenThen whenThen = (SqlWhenThen)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = whenThenList;
        RESULT.add(whenThen);
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhenThenList",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // WhenThen ::= WHEN Literal THEN FullQualifiedColumnName 
            {
              SqlWhenThen RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SqlLiteral lit = (SqlLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fqColumnNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fqColumnNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlFullQualifiedColumnName fqColumnName = (SqlFullQualifiedColumnName)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         RESULT = new SqlWhenThen(lit, fqColumnName);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhenThen",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ComplexCaseExpr ::= CASE ComplexWhenThenList ElseOpt END 
            {
              SqlComplexCaseExpr RESULT =null;
		int whenThenListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int whenThenListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<SqlComplexWhenThen> whenThenList = (List<SqlComplexWhenThen>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseActionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elseActionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SqlAtom elseAction = (SqlAtom)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
         RESULT = new SqlComplexCaseExpr(whenThenList, elseAction);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ComplexCaseExpr",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ComplexWhenThenList ::= ComplexWhenThen 
            {
              List<SqlComplexWhenThen> RESULT =null;
		int whenThenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int whenThenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlComplexWhenThen whenThen = (SqlComplexWhenThen)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new ArrayList();
        RESULT.add(whenThen);
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ComplexWhenThenList",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ComplexWhenThenList ::= ComplexWhenThenList ComplexWhenThen 
            {
              List<SqlComplexWhenThen> RESULT =null;
		int whenThenListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int whenThenListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<SqlComplexWhenThen> whenThenList = (List<SqlComplexWhenThen>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int whenThenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int whenThenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlComplexWhenThen whenThen = (SqlComplexWhenThen)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = whenThenList;
        RESULT.add(whenThen);
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ComplexWhenThenList",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ComplexWhenThen ::= WHEN LogicalExpression THEN Atom 
            {
              SqlComplexWhenThen RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SqlSimpleExpr condition = (SqlSimpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int actionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int actionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlAtom action = (SqlAtom)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new SqlComplexWhenThen(condition, action);
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ComplexWhenThen",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ElseOpt ::= 
            {
              SqlAtom RESULT =null;
		
        RESULT = null;
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseOpt",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ElseOpt ::= ELSE Atom 
            {
              SqlAtom RESULT =null;
		int elseActionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseActionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlAtom elseAction = (SqlAtom)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = elseAction;
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseOpt",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Table ::= CommentsOpt CREATE TABLE IDENTIFIER L_PARENT TableContentDefinitions R_PARENT DatabaseSystemsHintsOpt SEMICOLON 
            {
              SqlTable RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int definitionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int definitionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<SqlTableContentDefinition> definitions = (List<SqlTableContentDefinition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dbSysHintsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dbSysHintsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<SqlDatabaseSystemHints> dbSysHints = (List<SqlDatabaseSystemHints>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
          RESULT = new SqlTable(id, definitions, dbSysHints, comment);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Table",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TableContentDefinitions ::= TableContentDefinition 
            {
              List<SqlTableContentDefinition> RESULT =null;
		int definitionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int definitionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlTableContentDefinition definition = (SqlTableContentDefinition)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       RESULT = new ArrayList();
       RESULT.add(definition);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TableContentDefinitions",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TableContentDefinitions ::= TableContentDefinitions COMMA TableContentDefinition 
            {
              List<SqlTableContentDefinition> RESULT =null;
		int definitionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int definitionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<SqlTableContentDefinition> definitions = (List<SqlTableContentDefinition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int definitionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int definitionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlTableContentDefinition definition = (SqlTableContentDefinition)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         RESULT = definitions;
         RESULT.add(definition);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TableContentDefinitions",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TableContentDefinition ::= TableColumn 
            {
              SqlTableContentDefinition RESULT =null;
		int columnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int columnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlTableColumn column = (SqlTableColumn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = column;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TableContentDefinition",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TableContentDefinition ::= PrimaryKey 
            {
              SqlTableContentDefinition RESULT =null;
		int primaryKeyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int primaryKeyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlPrimaryKey primaryKey = (SqlPrimaryKey)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         RESULT = primaryKey;
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TableContentDefinition",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TableContentDefinition ::= ForeignKey 
            {
              SqlTableContentDefinition RESULT =null;
		int foreignKeyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int foreignKeyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlForeignKey foreignKey = (SqlForeignKey)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = foreignKey;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TableContentDefinition",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TableContentDefinition ::= UniqueConstraint 
            {
              SqlTableContentDefinition RESULT =null;
		int uniqueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uniqueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlUniqueConstraint unique = (SqlUniqueConstraint)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = unique;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TableContentDefinition",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TableContentDefinition ::= Index 
            {
              SqlTableContentDefinition RESULT =null;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlIndex index = (SqlIndex)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = index;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TableContentDefinition",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TableContentDefinition ::= Trigger 
            {
              SqlTableContentDefinition RESULT =null;
		int triggerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int triggerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlTrigger trigger = (SqlTrigger)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         RESULT = trigger;
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TableContentDefinition",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Trigger ::= CommentsOpt TRIGGER IdentifierOpt AFTER DELETE ON IDENTIFIER EXECUTE FOR EACH ROW BEGIN DmlStatementList END OR EXECUTE FOR EACH STATEMENT BEGIN DmlStatementList END DatabaseSystemsHintsOpt 
            {
              SqlTrigger RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-22)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-22)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-22)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-20)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-20)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-20)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).right;
		String table = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-16)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		List<SqlDmlStatement> stmts = (List<SqlDmlStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int stmts2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stmts2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<SqlDmlStatement> stmts2 = (List<SqlDmlStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dbSysHintsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dbSysHintsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<SqlDatabaseSystemHints> dbSysHints = (List<SqlDatabaseSystemHints>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new SqlTrigger(id, table, stmts, stmts2, dbSysHints, comment);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Trigger",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-22)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DmlStatementList ::= DmlStatement 
            {
              List<SqlDmlStatement> RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlDmlStatement stmt = (SqlDmlStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
     RESULT = new ArrayList<SqlDmlStatement>();
     RESULT.add(stmt);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DmlStatementList",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DmlStatementList ::= DmlStatementList DmlStatement 
            {
              List<SqlDmlStatement> RESULT =null;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<SqlDmlStatement> stmts = (List<SqlDmlStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlDmlStatement stmt = (SqlDmlStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       RESULT = stmts;
       RESULT.add(stmt);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DmlStatementList",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DmlStatement ::= Insert 
            {
              SqlDmlStatement RESULT =null;
		int insertleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insertright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlInsert insert = (SqlInsert)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = insert;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DmlStatement",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DmlStatement ::= Update 
            {
              SqlDmlStatement RESULT =null;
		int updateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int updateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlUpdate update = (SqlUpdate)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
     RESULT = update;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DmlStatement",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TableColumn ::= CommentsOpt IDENTIFIER DataType NullOpt DefaultOpt ReferencesOpt DatabaseSystemsHintsOpt 
            {
              SqlTableColumn RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SqlDataType dataType = (SqlDataType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nullOptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nullOptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Boolean nullOpt = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int defaultOptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int defaultOptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SqlLiteral defaultOpt = (SqlLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int referenceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int referenceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SqlReference reference = (SqlReference)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dbSysHintsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dbSysHintsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<SqlDatabaseSystemHints> dbSysHints = (List<SqlDatabaseSystemHints>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new SqlTableColumn(id, dataType, nullOpt, defaultOpt, reference, dbSysHints, comment);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TableColumn",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DatabaseSystemsHintsOpt ::= 
            {
              List<SqlDatabaseSystemHints> RESULT =null;
		
      RESULT = null; 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DatabaseSystemsHintsOpt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DatabaseSystemsHintsOpt ::= DatabaseSystemsHints 
            {
              List<SqlDatabaseSystemHints> RESULT =null;
		int hintsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hintsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<SqlDatabaseSystemHints> hints = (List<SqlDatabaseSystemHints>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       RESULT = hints;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DatabaseSystemsHintsOpt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DatabaseSystemsHints ::= DatabaseSystemHints 
            {
              List<SqlDatabaseSystemHints> RESULT =null;
		int hintsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hintsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlDatabaseSystemHints hints = (SqlDatabaseSystemHints)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new ArrayList<SqlDatabaseSystemHints>();
      RESULT.add(hints);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DatabaseSystemsHints",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DatabaseSystemsHints ::= DatabaseSystemsHints DatabaseSystemHints 
            {
              List<SqlDatabaseSystemHints> RESULT =null;
		int dbmsHintsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dbmsHintsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<SqlDatabaseSystemHints> dbmsHints = (List<SqlDatabaseSystemHints>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int hintsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hintsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlDatabaseSystemHints hints = (SqlDatabaseSystemHints)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = dbmsHints;
      RESULT.add(hints);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DatabaseSystemsHints",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DatabaseSystemHints ::= FOR IDENTIFIER USE L_PARENT DatabaseSystemHintList R_PARENT 
            {
              SqlDatabaseSystemHints RESULT =null;
		int dbmsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dbmsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String dbms = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int hintsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hintsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<SqlDatabaseSystemHint> hints = (List<SqlDatabaseSystemHint>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new SqlDatabaseSystemHints(dbms, hints);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DatabaseSystemHints",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DatabaseSystemHintList ::= DatabaseSystemHint 
            {
              List<SqlDatabaseSystemHint> RESULT =null;
		int hintleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hintright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlDatabaseSystemHint hint = (SqlDatabaseSystemHint)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new ArrayList<SqlDatabaseSystemHint>();
      RESULT.add(hint);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DatabaseSystemHintList",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DatabaseSystemHintList ::= DatabaseSystemHintList COMMA DatabaseSystemHint 
            {
              List<SqlDatabaseSystemHint> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<SqlDatabaseSystemHint> list = (List<SqlDatabaseSystemHint>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int hintleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hintright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlDatabaseSystemHint hint = (SqlDatabaseSystemHint)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = list;
      RESULT.add(hint);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DatabaseSystemHintList",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DatabaseSystemHint ::= IDENTIFIER DatabaseSystemHintValueOpt 
            {
              SqlDatabaseSystemHint RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
     RESULT = new SqlDatabaseSystemHint(id, value);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DatabaseSystemHint",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DatabaseSystemHintValueOpt ::= 
            {
              String RESULT =null;
		
      RESULT = null;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DatabaseSystemHintValueOpt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DatabaseSystemHintValueOpt ::= EQUAL STRING_LITERAL 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = value;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DatabaseSystemHintValueOpt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NullOpt ::= 
            {
              Boolean RESULT =null;
		
     RESULT = true;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NullOpt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NullOpt ::= NULL 
            {
              Boolean RESULT =null;
		
      RESULT = true;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NullOpt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NullOpt ::= NOT NULL 
            {
              Boolean RESULT =null;
		
     RESULT = false;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NullOpt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DefaultOpt ::= 
            {
              SqlLiteral RESULT =null;
		
         RESULT = null;
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefaultOpt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DefaultOpt ::= DEFAULT Literal 
            {
              SqlLiteral RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlLiteral lit = (SqlLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         RESULT = lit;
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefaultOpt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Literal ::= STRING_LITERAL 
            {
              SqlLiteral RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lit = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       RESULT = new SqlLiteral(lit);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Literal ::= INTEGER_LITERAL 
            {
              SqlLiteral RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer lit = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       RESULT = new SqlLiteral(lit);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Literal ::= NUMBER_LITERAL 
            {
              SqlLiteral RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double lit = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       RESULT = new SqlLiteral(lit);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Literal ::= DATETIME_LITERAL 
            {
              SqlLiteral RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Date lit = (Date)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       RESULT = new SqlLiteral(lit);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Literal ::= NULL 
            {
              SqlLiteral RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       RESULT = new SqlLiteral(SqlNull.getInstance());
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ReferencesOpt ::= 
            {
              SqlReference RESULT =null;
		
     RESULT = null;
   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReferencesOpt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ReferencesOpt ::= References 
            {
              SqlReference RESULT =null;
		int referenceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int referenceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlReference reference = (SqlReference)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT=reference;
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReferencesOpt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PrimaryKey ::= CommentsOpt PRIMARY KEY L_PARENT TableColumnNames R_PARENT DatabaseSystemsHintsOpt 
            {
              SqlPrimaryKey RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int namesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int namesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> names = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dbSysHintsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dbSysHintsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<SqlDatabaseSystemHints> dbSysHints = (List<SqlDatabaseSystemHints>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
      RESULT = new SqlPrimaryKey(null, names, dbSysHints, comment);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryKey",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TableColumnNames ::= IDENTIFIER 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ArrayList();
            RESULT.add(id);
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TableColumnNames",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TableColumnNames ::= TableColumnNames COMMA IDENTIFIER 
            {
              List<String> RESULT =null;
		int namesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int namesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> names = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = names;
           RESULT.add(id);
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TableColumnNames",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ForeignKey ::= CommentsOpt FOREIGN KEY L_PARENT IDENTIFIER R_PARENT References DatabaseSystemsHintsOpt 
            {
              SqlForeignKey RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int columnIdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int columnIdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String columnId = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int referencesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int referencesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SqlReference references = (SqlReference)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dbSysHintsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dbSysHintsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<SqlDatabaseSystemHints> dbSysHints = (List<SqlDatabaseSystemHints>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new SqlForeignKey(null, columnId, references, dbSysHints, comment); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForeignKey",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // References ::= REFERENCES IDENTIFIER L_PARENT IDENTIFIER R_PARENT OnDeleteOpt 
            {
              SqlReference RESULT =null;
		int foreignTableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int foreignTableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String foreignTable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int foreignColumnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int foreignColumnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String foreignColumn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int onDeleteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int onDeleteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlForeignKeyAction onDelete = (SqlForeignKeyAction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new SqlReference(foreignTable, foreignColumn, onDelete);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("References",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OnDeleteOpt ::= 
            {
              SqlForeignKeyAction RESULT =null;
		
             RESULT = null;
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OnDeleteOpt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OnDeleteOpt ::= OnDelete 
            {
              SqlForeignKeyAction RESULT =null;
		int onDeleteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int onDeleteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlForeignKeyAction onDelete = (SqlForeignKeyAction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       RESULT = onDelete;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OnDeleteOpt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OnDelete ::= ON DELETE CASCADE 
            {
              SqlForeignKeyAction RESULT =null;
		
       RESULT = SqlForeignKeyAction.ON_DELETE_CASCADE;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OnDelete",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OnDelete ::= ON DELETE SET NULL 
            {
              SqlForeignKeyAction RESULT =null;
		
       RESULT = SqlForeignKeyAction.ON_DELETE_SET_NULL;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OnDelete",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OnDelete ::= ON DELETE THIS CASCADE 
            {
              SqlForeignKeyAction RESULT =null;
		
     RESULT = SqlForeignKeyAction.ON_DELETE_THIS_CASCADE;
   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OnDelete",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // UniqueConstraint ::= CommentsOpt UNIQUE IdentifierOpt L_PARENT TableColumnNames R_PARENT DatabaseSystemsHintsOpt 
            {
              SqlUniqueConstraint RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int columnsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int columnsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> columns = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dbSysHintsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dbSysHintsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<SqlDatabaseSystemHints> dbSysHints = (List<SqlDatabaseSystemHints>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new SqlUniqueConstraint(id, columns, dbSysHints, comment); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UniqueConstraint",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // IdentifierOpt ::= 
            {
              String RESULT =null;
		
      RESULT = null;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierOpt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // IdentifierOpt ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       RESULT = id;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierOpt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Index ::= CommentsOpt INDEX IdentifierOpt L_PARENT TableColumnNames R_PARENT DatabaseSystemsHintsOpt 
            {
              SqlIndex RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int columnsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int columnsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> columns = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dbSysHintsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dbSysHintsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<SqlDatabaseSystemHints> dbSysHints = (List<SqlDatabaseSystemHints>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new SqlIndex(id, columns, dbSysHints, comment); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CommentsOpt ::= 
            {
              String RESULT =null;
		
      RESULT = null;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CommentsOpt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CommentsOpt ::= Comments 
            {
              String RESULT =null;
		int commentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int commentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String comments = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       RESULT = comments;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CommentsOpt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Comments ::= COMMENT 
            {
              String RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = comment;
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Comments",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Comments ::= Comments COMMENT 
            {
              String RESULT =null;
		int commentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int commentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String comments = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = comments + "\n" + comment;
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Comments",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DataType ::= INTEGER 
            {
              SqlDataType RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object integer = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new SqlDataType(SqlDataType.DataType.INTEGER);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataType",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DataType ::= BIGINT 
            {
              SqlDataType RESULT =null;
		int lngleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lngright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lng = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new SqlDataType(SqlDataType.DataType.BIGINT);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataType",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DataType ::= VARCHAR L_PARENT INTEGER_LITERAL R_PARENT 
            {
              SqlDataType RESULT =null;
		int varcharleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varcharright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object varchar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lengthleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lengthright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer length = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new SqlDataType(SqlDataType.DataType.VARCHAR, length);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataType",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DataType ::= BIT 
            {
              SqlDataType RESULT =null;
		int bitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new SqlDataType(SqlDataType.DataType.BIT);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataType",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DataType ::= BLOB 
            {
              SqlDataType RESULT =null;
		int blobleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blobright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object blob = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new SqlDataType(SqlDataType.DataType.BLOB);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataType",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DataType ::= CLOB 
            {
              SqlDataType RESULT =null;
		int clobleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int clobright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object clob = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new SqlDataType(SqlDataType.DataType.CLOB);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataType",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DataType ::= DATETIME 
            {
              SqlDataType RESULT =null;
		int datetimeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int datetimeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object datetime = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new SqlDataType(SqlDataType.DataType.DATETIME);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataType",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DataType ::= DATE 
            {
              SqlDataType RESULT =null;
		int datetimeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int datetimeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object datetime = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new SqlDataType(SqlDataType.DataType.DATE);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataType",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DataType ::= TIME 
            {
              SqlDataType RESULT =null;
		int datetimeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int datetimeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object datetime = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new SqlDataType(SqlDataType.DataType.TIME);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataType",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // DataType ::= CHAR L_PARENT INTEGER_LITERAL R_PARENT 
            {
              SqlDataType RESULT =null;
		int characterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int characterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object character = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lengthleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lengthright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer length = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new SqlDataType(SqlDataType.DataType.CHAR, length);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataType",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // DataType ::= NUMBER L_PARENT INTEGER_LITERAL R_PARENT 
            {
              SqlDataType RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object number = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lengthleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lengthright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer length = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new SqlDataType(SqlDataType.DataType.NUMBER, length);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataType",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DataType ::= DECIMAL L_PARENT INTEGER_LITERAL COMMA INTEGER_LITERAL R_PARENT 
            {
              SqlDataType RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object decimal = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lengthleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lengthright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer length = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int precisionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int precisionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer precision = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new SqlDataType(SqlDataType.DataType.DECIMAL, length, precision);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataType",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DataType ::= FLOAT 
            {
              SqlDataType RESULT =null;
		int fltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object flt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new SqlDataType(SqlDataType.DataType.FLOAT);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DataType",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Insert ::= InsertWithSelect 
            {
              SqlInsert RESULT =null;
		int insertWithSelectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insertWithSelectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlInsertWithSelect insertWithSelect = (SqlInsertWithSelect)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = insertWithSelect;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Insert",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Insert ::= InsertWithValues 
            {
              SqlInsert RESULT =null;
		int insertWithValuesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insertWithValuesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlInsertWithValues insertWithValues = (SqlInsertWithValues)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = insertWithValues;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Insert",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // InsertWithValues ::= CommentsOpt INSERT INTO IDENTIFIER L_PARENT TableColumnNames R_PARENT VALUES L_PARENT LiteralList R_PARENT SEMICOLON 
            {
              SqlInsertWithValues RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String table = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int columnsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int columnsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<String> columns = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<SqlLiteral> values = (List<SqlLiteral>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
          RESULT = new SqlInsertWithValues(table, columns, values, null, comment);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InsertWithValues",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // InsertWithSelect ::= CommentsOpt INSERT INTO IDENTIFIER L_PARENT TableColumnNames R_PARENT Select SEMICOLON 
            {
              SqlInsertWithSelect RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String table = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int columnsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int columnsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<String> columns = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int selectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SqlSelect select = (SqlSelect)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
          RESULT = new SqlInsertWithSelect(table, columns, select, null, comment);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InsertWithSelect",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Update ::= CommentsOpt UPDATE IdentifierOpt SET UpdateColumnExpressionList WhereOpt SEMICOLON 
            {
              SqlUpdate RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int columnExpressionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int columnExpressionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<SqlUpdateColumnExpression> columnExpressions = (List<SqlUpdateColumnExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int filterExprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int filterExprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SqlSimpleExpr filterExpr = (SqlSimpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new SqlUpdate(id, columnExpressions, filterExpr, null, comment);
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Update",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // UpdateColumnExpressionList ::= UpdateColumnExpression 
            {
              List<SqlUpdateColumnExpression> RESULT =null;
		int columnExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int columnExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlUpdateColumnExpression columnExpression = (SqlUpdateColumnExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
     RESULT = new ArrayList<SqlUpdateColumnExpression>();
     RESULT.add(columnExpression);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UpdateColumnExpressionList",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // UpdateColumnExpressionList ::= UpdateColumnExpressionList COMMA UpdateColumnExpression 
            {
              List<SqlUpdateColumnExpression> RESULT =null;
		int columnExpressionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int columnExpressionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<SqlUpdateColumnExpression> columnExpressions = (List<SqlUpdateColumnExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int columnExpressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int columnExpressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlUpdateColumnExpression columnExpression = (SqlUpdateColumnExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = columnExpressions;
      RESULT.add(columnExpression);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UpdateColumnExpressionList",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // UpdateColumnExpression ::= IDENTIFIER EQUAL Atom 
            {
              SqlUpdateColumnExpression RESULT =null;
		int columnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int columnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String column = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int atomleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlAtom atom = (SqlAtom)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
     RESULT = new SqlUpdateColumnExpression(column, atom);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UpdateColumnExpression",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // WhereOpt ::= 
            {
              SqlSimpleExpr RESULT =null;
		
      RESULT = null;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhereOpt",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // WhereOpt ::= WHERE LogicalExpression 
            {
              SqlSimpleExpr RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlSimpleExpr expr = (SqlSimpleExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       RESULT = expr;
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhereOpt",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // LiteralList ::= Literal 
            {
              List<SqlLiteral> RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlLiteral lit = (SqlLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ArrayList();
            RESULT.add(lit);
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralList",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // LiteralList ::= LiteralList COMMA Literal 
            {
              List<SqlLiteral> RESULT =null;
		int literalsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int literalsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<SqlLiteral> literals = (List<SqlLiteral>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlLiteral lit = (SqlLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = literals;
           RESULT.add(lit);
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralList",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Function ::= IDENTIFIER L_PARENT ArgumentListOpt R_PARENT 
            {
              SqlFunction RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<SqlAtom> arguments = (List<SqlAtom>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new SqlFunction(name, arguments);
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Function",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ArgumentListOpt ::= 
            {
              List<SqlAtom> RESULT =null;
		
        RESULT = new ArrayList();
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentListOpt",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ArgumentListOpt ::= Atom 
            {
              List<SqlAtom> RESULT =null;
		int argumentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argumentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlAtom argument = (SqlAtom)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new ArrayList();
        RESULT.add(argument);
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentListOpt",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ArgumentListOpt ::= ArgumentListOpt COMMA Atom 
            {
              List<SqlAtom> RESULT =null;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<SqlAtom> arguments = (List<SqlAtom>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argumentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argumentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SqlAtom argument = (SqlAtom)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = arguments;
        RESULT.add(argument);
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentListOpt",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
