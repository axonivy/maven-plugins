/* The following code was generated by JFlex 1.6.1 */

package ch.ivyteam.db.meta.parser.internal;

import java_cup.runtime.*;

import java.math.BigDecimal;
import static ch.ivyteam.db.meta.parser.internal.Symbols.*;

/** 
 * This class is a scanner for IvyScript.
 */



@SuppressWarnings("all")
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int READ_STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\3\1\2\1\52\1\3\1\1\16\6\4\0\1\3\3\0"+
    "\1\5\2\0\1\51\1\42\1\43\2\0\1\45\1\4\1\10\1\0"+
    "\12\7\1\0\1\44\1\47\1\46\1\50\2\0\1\14\1\21\1\11"+
    "\1\25\1\13\1\34\1\27\1\30\1\16\1\41\1\37\1\22\1\32"+
    "\1\17\1\31\1\35\1\40\1\12\1\20\1\15\1\33\1\23\1\24"+
    "\1\26\1\36\1\5\4\0\1\5\1\0\32\5\4\0\6\6\1\53"+
    "\32\6\2\0\4\5\4\0\1\5\2\0\1\6\7\0\1\5\4\0"+
    "\1\5\5\0\27\5\1\0\37\5\1\0\u01ca\5\4\0\14\5\16\0"+
    "\5\5\7\0\1\5\1\0\1\5\21\0\160\6\5\5\1\0\2\5"+
    "\2\0\4\5\1\0\1\5\6\0\1\5\1\0\3\5\1\0\1\5"+
    "\1\0\24\5\1\0\123\5\1\0\213\5\1\0\5\6\2\0\246\5"+
    "\1\0\46\5\2\0\1\5\6\0\51\5\6\0\1\5\1\0\55\6"+
    "\1\0\1\6\1\0\2\6\1\0\2\6\1\0\1\6\10\0\33\5"+
    "\4\0\4\5\15\0\6\6\5\0\1\5\4\0\13\6\1\0\1\6"+
    "\3\0\53\5\37\6\4\0\2\5\1\6\143\5\1\0\1\5\10\6"+
    "\1\0\6\6\2\5\2\6\1\0\4\6\2\5\12\6\3\5\2\0"+
    "\1\5\17\0\1\6\1\5\1\6\36\5\33\6\2\0\131\5\13\6"+
    "\1\5\16\0\12\6\41\5\11\6\2\5\4\0\1\5\2\0\1\6"+
    "\30\5\4\6\1\5\11\6\1\5\3\6\1\5\5\6\22\0\31\5"+
    "\3\6\4\0\13\5\65\0\25\5\1\0\22\5\13\0\61\6\66\5"+
    "\3\6\1\5\22\6\1\5\7\6\12\5\2\6\2\0\12\6\1\0"+
    "\20\5\3\6\1\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\1\5\3\0\4\5\2\0\1\6\1\5\7\6\2\0\2\6"+
    "\2\0\3\6\1\5\10\0\1\6\4\0\2\5\1\0\3\5\2\6"+
    "\2\0\12\6\4\5\7\0\2\5\1\0\1\6\2\0\3\6\1\0"+
    "\6\5\4\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0"+
    "\2\5\1\0\2\5\2\0\1\6\1\0\5\6\4\0\2\6\2\0"+
    "\3\6\3\0\1\6\7\0\4\5\1\0\1\5\7\0\14\6\3\5"+
    "\1\6\13\0\3\6\1\0\11\5\1\0\3\5\1\0\26\5\1\0"+
    "\7\5\1\0\2\5\1\0\5\5\2\0\1\6\1\5\10\6\1\0"+
    "\3\6\1\0\3\6\2\0\1\5\17\0\2\5\2\6\2\0\12\6"+
    "\1\0\1\5\7\0\1\5\6\6\1\0\3\6\1\0\10\5\2\0"+
    "\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\2\0"+
    "\1\6\1\5\7\6\2\0\2\6\2\0\3\6\7\0\3\6\4\0"+
    "\2\5\1\0\3\5\2\6\2\0\12\6\1\0\1\5\20\0\1\6"+
    "\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0"+
    "\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0\14\5\4\0"+
    "\5\6\3\0\3\6\1\0\4\6\2\0\1\5\6\0\1\6\16\0"+
    "\12\6\11\0\1\5\6\0\5\6\10\5\1\0\3\5\1\0\27\5"+
    "\1\0\20\5\3\0\1\5\7\6\1\0\3\6\1\0\4\6\7\0"+
    "\2\6\1\0\3\5\5\0\2\5\2\6\2\0\12\6\20\0\1\5"+
    "\3\6\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0"+
    "\5\5\2\0\1\6\1\5\7\6\1\0\3\6\1\0\4\6\7\0"+
    "\2\6\7\0\1\5\1\0\2\5\2\6\2\0\12\6\1\0\2\5"+
    "\15\0\4\6\11\5\1\0\3\5\1\0\51\5\2\6\1\5\7\6"+
    "\1\0\3\6\1\0\4\6\1\5\5\0\3\5\1\6\7\0\3\5"+
    "\2\6\2\0\12\6\12\0\6\5\1\0\3\6\1\0\22\5\3\0"+
    "\30\5\1\0\11\5\1\0\1\5\2\0\7\5\3\0\1\6\4\0"+
    "\6\6\1\0\1\6\1\0\10\6\6\0\12\6\2\0\2\6\15\0"+
    "\60\5\1\6\2\5\7\6\4\0\10\5\10\6\1\0\12\6\47\0"+
    "\2\5\1\0\1\5\1\0\5\5\1\0\30\5\1\0\1\5\1\0"+
    "\12\5\1\6\2\5\11\6\1\5\2\0\5\5\1\0\1\5\1\0"+
    "\6\6\2\0\12\6\2\0\4\5\40\0\1\5\27\0\2\6\6\0"+
    "\12\6\13\0\1\6\1\0\1\6\1\0\1\6\4\0\2\6\10\5"+
    "\1\0\44\5\4\0\24\6\1\0\2\6\5\5\13\6\1\0\44\6"+
    "\11\0\1\6\71\0\53\5\24\6\1\5\12\6\6\0\6\5\4\6"+
    "\4\5\3\6\1\5\3\6\2\5\7\6\3\5\4\6\15\5\14\6"+
    "\1\5\17\6\2\0\46\5\1\0\1\5\5\0\1\5\2\0\53\5"+
    "\1\0\u014d\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5"+
    "\2\0\51\5\1\0\4\5\2\0\41\5\1\0\4\5\2\0\7\5"+
    "\1\0\1\5\1\0\4\5\2\0\17\5\1\0\71\5\1\0\4\5"+
    "\2\0\103\5\2\0\3\6\40\0\20\5\20\0\126\5\2\0\6\5"+
    "\3\0\u026c\5\2\0\21\5\1\0\32\5\5\0\113\5\3\0\13\5"+
    "\7\0\15\5\1\0\4\5\3\6\13\0\22\5\3\6\13\0\22\5"+
    "\2\6\14\0\15\5\1\0\3\5\1\0\2\6\14\0\64\5\40\6"+
    "\3\0\1\5\3\0\2\5\1\6\2\0\12\6\41\0\4\6\1\0"+
    "\12\6\6\0\131\5\7\0\5\5\2\6\42\5\1\6\1\5\5\0"+
    "\106\5\12\0\37\5\1\0\14\6\4\0\14\6\12\0\12\6\36\5"+
    "\2\0\5\5\13\0\54\5\4\0\32\5\6\0\12\6\46\0\27\5"+
    "\5\6\4\0\65\5\12\6\1\0\35\6\2\0\13\6\6\0\12\6"+
    "\15\0\1\5\10\0\16\6\1\0\2\6\77\0\5\6\57\5\21\6"+
    "\7\5\4\0\12\6\21\0\11\6\14\0\3\6\36\5\15\6\2\5"+
    "\12\6\54\5\16\6\14\0\44\5\24\6\10\0\12\6\3\0\3\5"+
    "\12\6\44\5\2\0\11\5\7\0\53\5\2\0\3\5\20\0\3\6"+
    "\1\0\25\6\4\5\1\6\6\5\1\6\2\5\3\6\1\5\5\0"+
    "\300\5\72\6\1\0\5\6\u0116\5\2\0\6\5\2\0\46\5\2\0"+
    "\6\5\2\0\10\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\37\5\2\0\65\5\1\0\7\5\1\0\1\5\3\0\3\5\1\0"+
    "\7\5\3\0\4\5\2\0\6\5\4\0\15\5\5\0\3\5\1\0"+
    "\7\5\16\0\5\6\30\0\1\52\1\52\5\6\20\0\2\5\23\0"+
    "\1\5\13\0\5\6\1\0\12\6\1\0\1\5\15\0\1\5\20\0"+
    "\15\5\3\0\40\5\20\0\15\6\4\0\1\6\3\0\14\6\21\0"+
    "\1\5\4\0\1\5\2\0\12\5\1\0\1\5\3\0\5\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0\13\5\2\0"+
    "\4\5\5\0\5\5\4\0\1\5\21\0\51\5\u0a77\0\57\5\1\0"+
    "\57\5\1\0\205\5\6\0\4\5\3\6\2\5\14\0\46\5\1\0"+
    "\1\5\5\0\1\5\2\0\70\5\7\0\1\5\17\0\1\6\27\5"+
    "\11\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\7\5\1\0\40\6\57\0\1\5"+
    "\u01d5\0\3\5\31\0\11\5\6\6\1\0\5\5\2\0\5\5\4\0"+
    "\126\5\2\0\2\6\2\0\3\5\1\0\132\5\1\0\4\5\5\0"+
    "\53\5\1\0\136\5\21\0\40\5\60\0\20\5\u0200\0\u19c0\5\100\0"+
    "\u51fd\5\3\0\u048d\5\103\0\56\5\2\0\u010d\5\3\0\20\5\12\6"+
    "\2\5\24\0\57\5\1\6\4\0\12\6\1\0\37\5\2\6\120\5"+
    "\2\6\45\0\11\5\2\0\147\5\2\0\65\5\2\0\11\5\52\0"+
    "\15\5\1\6\3\5\1\6\4\5\1\6\27\5\5\6\4\0\1\6"+
    "\13\0\1\5\7\0\64\5\14\0\2\6\62\5\22\6\12\0\12\6"+
    "\6\0\22\6\6\5\3\0\1\5\1\0\2\5\13\6\34\5\10\6"+
    "\2\0\27\5\15\6\14\0\35\5\3\0\4\6\57\5\16\6\16\0"+
    "\1\5\12\6\6\0\5\5\1\6\12\5\12\6\5\5\1\0\51\5"+
    "\16\6\11\0\3\5\1\6\10\5\2\6\2\0\12\6\6\0\27\5"+
    "\3\0\1\5\3\6\62\5\1\6\1\5\3\6\2\5\2\6\5\5"+
    "\2\6\1\5\1\6\1\5\30\0\3\5\2\0\13\5\5\6\2\0"+
    "\3\5\2\6\12\0\6\5\2\0\6\5\2\0\6\5\11\0\7\5"+
    "\1\0\7\5\1\0\53\5\1\0\16\5\6\0\163\5\10\6\1\0"+
    "\2\6\2\0\12\6\6\0\u2ba4\5\14\0\27\5\4\0\61\5\u2104\0"+
    "\u016e\5\2\0\152\5\46\0\7\5\14\0\5\5\5\0\1\5\1\6"+
    "\12\5\1\0\15\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0"+
    "\2\5\1\0\154\5\41\0\u016b\5\22\0\100\5\2\0\66\5\50\0"+
    "\15\5\3\0\20\6\20\0\20\6\3\0\2\5\30\0\3\5\31\0"+
    "\1\5\6\0\5\5\1\0\207\5\2\0\1\6\4\0\1\5\13\0"+
    "\12\6\7\0\32\5\4\0\1\5\1\0\32\5\13\0\131\5\3\0"+
    "\6\5\2\0\6\5\2\0\6\5\2\0\3\5\3\0\2\5\3\0"+
    "\2\5\22\0\3\6\4\0\14\5\1\0\32\5\1\0\23\5\1\0"+
    "\2\5\1\0\17\5\2\0\16\5\42\0\173\5\105\0\65\5\210\0"+
    "\1\6\202\0\35\5\3\0\61\5\17\0\1\6\37\0\40\5\15\0"+
    "\36\5\5\0\46\5\5\6\5\0\36\5\2\0\44\5\4\0\10\5"+
    "\1\0\5\5\52\0\236\5\2\0\12\6\6\0\44\5\4\0\44\5"+
    "\4\0\50\5\10\0\64\5\234\0\u0137\5\11\0\26\5\12\0\10\5"+
    "\230\0\6\5\2\0\1\5\1\0\54\5\1\0\2\5\3\0\1\5"+
    "\2\0\27\5\12\0\27\5\11\0\37\5\101\0\23\5\1\0\2\5"+
    "\12\0\26\5\12\0\32\5\106\0\70\5\6\0\2\5\100\0\1\5"+
    "\3\6\1\0\2\6\5\0\4\6\4\5\1\0\3\5\1\0\35\5"+
    "\2\0\3\6\4\0\1\6\40\0\35\5\3\0\35\5\43\0\10\5"+
    "\1\0\34\5\2\6\31\0\66\5\12\0\26\5\12\0\23\5\15\0"+
    "\22\5\156\0\111\5\67\0\63\5\15\0\63\5\15\0\44\5\4\6"+
    "\10\0\12\6\u0146\0\52\5\1\0\2\6\3\0\2\5\116\0\35\5"+
    "\12\0\1\5\10\0\26\5\13\6\137\0\25\5\33\0\27\5\11\0"+
    "\3\6\65\5\17\6\37\0\12\6\17\0\4\6\55\5\13\6\2\0"+
    "\1\6\17\0\1\6\2\0\31\5\7\0\12\6\6\0\3\6\44\5"+
    "\16\6\1\0\12\6\4\0\1\5\2\6\1\5\10\0\43\5\1\6"+
    "\2\0\1\5\11\0\3\6\60\5\16\6\4\5\4\0\4\6\1\0"+
    "\14\6\1\5\1\0\1\5\43\0\22\5\1\0\31\5\14\6\6\0"+
    "\1\6\101\0\7\5\1\0\1\5\1\0\4\5\1\0\17\5\1\0"+
    "\12\5\7\0\57\5\14\6\5\0\12\6\6\0\4\6\1\0\10\5"+
    "\2\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5"+
    "\1\0\2\6\1\5\7\6\2\0\2\6\2\0\3\6\2\0\1\5"+
    "\6\0\1\6\5\0\5\5\2\6\2\0\7\6\3\0\5\6\213\0"+
    "\65\5\22\6\4\5\5\0\12\6\4\0\1\6\3\5\36\0\60\5"+
    "\24\6\2\5\1\0\1\5\10\0\12\6\246\0\57\5\7\6\2\0"+
    "\11\6\27\0\4\5\2\6\42\0\60\5\21\6\3\0\1\5\13\0"+
    "\12\6\46\0\53\5\15\6\1\5\7\0\12\6\66\0\33\5\2\0"+
    "\17\6\4\0\12\6\306\0\54\5\17\6\145\0\100\5\12\6\25\0"+
    "\10\5\2\0\1\5\2\0\10\5\1\0\2\5\1\0\30\5\6\6"+
    "\1\0\2\6\2\0\4\6\1\5\1\6\1\5\2\6\14\0\12\6"+
    "\106\0\10\5\2\0\47\5\7\6\2\0\7\6\1\5\1\0\1\5"+
    "\1\6\33\0\1\5\12\6\50\5\7\6\1\5\4\6\10\0\1\6"+
    "\10\0\1\5\13\6\56\5\20\6\3\0\1\5\42\0\71\5\u0107\0"+
    "\11\5\1\0\45\5\10\6\1\0\10\6\1\5\17\0\12\6\30\0"+
    "\36\5\2\0\26\6\1\0\16\6\111\0\7\5\1\0\2\5\1\0"+
    "\46\5\6\6\3\0\1\6\1\0\2\6\1\0\7\6\1\5\1\6"+
    "\10\0\12\6\6\0\6\5\1\0\2\5\1\0\40\5\5\6\1\0"+
    "\2\6\1\0\5\6\1\5\7\0\12\6\u0136\0\23\5\4\6\271\0"+
    "\1\5\54\0\4\5\37\0\u039a\5\146\0\157\5\21\0\304\5\u0abc\0"+
    "\u042f\5\1\0\11\6\u0fc7\0\u0247\5\u21b9\0\u0239\5\7\0\37\5\1\0"+
    "\12\6\146\0\36\5\2\0\5\6\13\0\60\5\7\6\11\0\4\5"+
    "\14\0\12\6\11\0\25\5\5\0\23\5\u02b0\0\100\5\200\0\113\5"+
    "\4\0\1\6\1\5\67\6\7\0\4\6\15\5\100\0\2\5\1\0"+
    "\1\5\1\6\13\0\2\6\16\0\u17f8\5\10\0\u04d6\5\52\0\11\5"+
    "\u22f7\0\u011f\5\61\0\3\5\21\0\4\5\10\0\u018c\5\u0904\0\153\5"+
    "\5\0\15\5\3\0\11\5\7\0\12\5\3\0\2\6\1\0\4\6"+
    "\u14c1\0\5\6\3\0\26\6\2\0\7\6\36\0\4\6\224\0\3\6"+
    "\u01bb\0\125\5\1\0\107\5\1\0\2\5\2\0\1\5\2\0\2\5"+
    "\2\0\4\5\1\0\14\5\1\0\1\5\1\0\7\5\1\0\101\5"+
    "\1\0\4\5\2\0\10\5\1\0\7\5\1\0\34\5\1\0\4\5"+
    "\1\0\5\5\1\0\1\5\3\0\7\5\1\0\u0154\5\2\0\31\5"+
    "\1\0\31\5\1\0\37\5\1\0\31\5\1\0\37\5\1\0\31\5"+
    "\1\0\37\5\1\0\31\5\1\0\37\5\1\0\31\5\1\0\10\5"+
    "\2\0\62\6\u0200\0\67\6\4\0\62\6\10\0\1\6\16\0\1\6"+
    "\26\0\5\6\1\0\17\6\u0550\0\7\6\1\0\21\6\2\0\7\6"+
    "\1\0\2\6\1\0\5\6\325\0\55\5\3\0\7\6\7\5\2\0"+
    "\12\6\4\0\1\5\u0171\0\54\5\16\6\5\0\1\5\u0500\0\305\5"+
    "\13\0\7\6\51\0\104\5\7\6\1\5\4\0\12\6\u0356\0\1\5"+
    "\u014f\0\4\5\1\0\33\5\1\0\2\5\1\0\1\5\2\0\1\5"+
    "\1\0\12\5\1\0\4\5\1\0\1\5\1\0\1\5\6\0\1\5"+
    "\4\0\1\5\1\0\1\5\1\0\1\5\1\0\3\5\1\0\2\5"+
    "\1\0\1\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\2\5\1\0\1\5\2\0\4\5\1\0\7\5"+
    "\1\0\4\5\1\0\4\5\1\0\1\5\1\0\12\5\1\0\21\5"+
    "\5\0\3\5\1\0\5\5\1\0\21\5\u0d34\0\12\6\u0406\0\ua6de\5"+
    "\42\0\u1035\5\13\0\336\5\2\0\u1682\5\16\0\u1d31\5\u0c1f\0\u021e\5"+
    "\u05e2\0\u134b\5\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uecc0\0"+
    "\1\6\36\0\140\6\200\0\360\6\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\23\4\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\14\4\1\23\7\4"+
    "\1\24\15\4\1\25\1\26\13\4\1\27\1\30\1\31"+
    "\6\4\1\32\1\4\1\33\2\4\1\34\1\35\12\4"+
    "\1\36\2\4\1\37\3\4\1\40\15\4\1\41\3\4"+
    "\1\42\2\4\1\43\3\4\1\44\1\45\1\46\2\4"+
    "\1\47\1\50\4\4\1\51\1\52\1\53\1\4\1\54"+
    "\3\4\1\55\5\4\1\56\1\57\2\4\1\60\1\4"+
    "\1\61\3\4\1\62\4\4\1\63\2\4\1\64\1\4"+
    "\1\65\3\4\1\66\1\4\1\67\1\4\1\70\1\4"+
    "\1\71\1\4\1\72\3\4\1\73\3\4\1\74\4\4"+
    "\1\75\1\76\2\4\1\77\2\4\1\100\5\4\1\101"+
    "\1\102\1\103\1\4\1\104\1\4\1\105\1\4\1\106"+
    "\2\4\1\107\1\110\2\4\1\111\1\4\1\112\1\113"+
    "\1\114\1\4\1\115\1\116\1\117\1\4\1\120\1\121"+
    "\2\4\1\122\1\4\1\123\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\130\0\130\0\260\0\334"+
    "\0\u0108\0\u0134\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c"+
    "\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c"+
    "\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\130\0\130\0\130"+
    "\0\130\0\130\0\u04a4\0\u04d0\0\130\0\u04fc\0\130\0\u0528"+
    "\0\u0134\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630\0\u065c"+
    "\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738\0\334\0\u0764\0\u0790"+
    "\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c\0\334\0\u0898\0\u08c4"+
    "\0\u08f0\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24"+
    "\0\u0a50\0\u0a7c\0\u0aa8\0\334\0\334\0\u0ad4\0\u0b00\0\u0b2c"+
    "\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c"+
    "\0\130\0\130\0\130\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68"+
    "\0\u0d94\0\334\0\u0dc0\0\334\0\u0dec\0\u0e18\0\334\0\334"+
    "\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78"+
    "\0\u0fa4\0\u0fd0\0\334\0\u0ffc\0\u1028\0\334\0\u1054\0\u1080"+
    "\0\u10ac\0\334\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188\0\u11b4"+
    "\0\u11e0\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc\0\u12e8\0\334"+
    "\0\u1314\0\u1340\0\u136c\0\u1398\0\u13c4\0\u13f0\0\334\0\u141c"+
    "\0\u1448\0\u1474\0\334\0\334\0\334\0\u14a0\0\u14cc\0\334"+
    "\0\334\0\u14f8\0\u1524\0\u1550\0\u157c\0\334\0\334\0\334"+
    "\0\u15a8\0\334\0\u15d4\0\u1600\0\u162c\0\334\0\u1658\0\u1684"+
    "\0\u16b0\0\u16dc\0\u1708\0\334\0\334\0\u1734\0\u1760\0\334"+
    "\0\u178c\0\334\0\u17b8\0\u17e4\0\u1810\0\u183c\0\u1868\0\u1894"+
    "\0\u18c0\0\u18ec\0\334\0\u1918\0\u1944\0\334\0\u1970\0\334"+
    "\0\u199c\0\u19c8\0\u19f4\0\334\0\u1a20\0\334\0\u1a4c\0\334"+
    "\0\u1a78\0\334\0\u1aa4\0\334\0\u1ad0\0\u1afc\0\u1b28\0\334"+
    "\0\u1b54\0\u1b80\0\u1bac\0\334\0\u1bd8\0\u1c04\0\u1c30\0\u1c5c"+
    "\0\334\0\334\0\u1c88\0\u1cb4\0\334\0\u1ce0\0\u1d0c\0\334"+
    "\0\u1d38\0\u1d64\0\u1d90\0\u1dbc\0\u1de8\0\334\0\334\0\334"+
    "\0\u1e14\0\334\0\u1e40\0\334\0\u1e6c\0\334\0\u1e98\0\u1ec4"+
    "\0\334\0\334\0\u1ef0\0\u1f1c\0\334\0\u1f48\0\334\0\334"+
    "\0\334\0\u1f74\0\334\0\334\0\334\0\u1fa0\0\334\0\334"+
    "\0\u1fcc\0\u1ff8\0\334\0\u2024\0\334\0\334";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\3\10\1\30"+
    "\1\10\1\31\1\32\1\33\1\10\1\34\1\10\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\2\0\51\46\1\47\2\46\56\0\1\5\55\0\1\50"+
    "\54\0\3\10\1\0\31\10\11\0\1\10\7\0\1\11"+
    "\1\51\52\0\1\51\51\0\3\10\1\0\1\10\1\52"+
    "\1\10\1\53\5\10\1\54\5\10\1\55\11\10\11\0"+
    "\1\10\5\0\3\10\1\0\2\10\1\56\2\10\1\57"+
    "\12\10\1\60\10\10\11\0\1\10\5\0\3\10\1\0"+
    "\3\10\1\61\2\10\1\62\2\10\1\63\3\10\1\64"+
    "\13\10\11\0\1\10\5\0\3\10\1\0\6\10\1\65"+
    "\1\66\1\10\1\67\11\10\1\70\5\10\11\0\1\10"+
    "\5\0\3\10\1\0\1\10\1\71\1\10\1\72\1\10"+
    "\1\73\11\10\1\74\11\10\11\0\1\10\5\0\3\10"+
    "\1\0\6\10\1\75\1\76\21\10\11\0\1\10\5\0"+
    "\3\10\1\0\20\10\1\77\1\10\1\100\6\10\11\0"+
    "\1\10\5\0\3\10\1\0\2\10\1\101\1\10\1\102"+
    "\24\10\11\0\1\10\5\0\3\10\1\0\2\10\1\103"+
    "\2\10\1\104\3\10\1\105\17\10\11\0\1\10\5\0"+
    "\3\10\1\0\2\10\1\106\26\10\11\0\1\10\5\0"+
    "\3\10\1\0\3\10\1\107\1\10\1\110\23\10\11\0"+
    "\1\10\5\0\3\10\1\0\17\10\1\111\11\10\11\0"+
    "\1\10\5\0\3\10\1\0\2\10\1\112\1\113\25\10"+
    "\11\0\1\10\5\0\3\10\1\0\1\10\1\114\4\10"+
    "\1\115\13\10\1\116\6\10\11\0\1\10\5\0\3\10"+
    "\1\0\6\10\1\117\1\120\14\10\1\121\4\10\11\0"+
    "\1\10\5\0\3\10\1\0\1\10\1\122\7\10\1\123"+
    "\6\10\1\124\1\10\1\125\6\10\11\0\1\10\5\0"+
    "\3\10\1\0\1\10\1\126\27\10\11\0\1\10\5\0"+
    "\3\10\1\0\2\10\1\127\26\10\11\0\1\10\5\0"+
    "\3\10\1\0\20\10\1\130\10\10\11\0\1\10\46\0"+
    "\1\131\1\0\1\132\51\0\1\133\5\0\51\46\1\0"+
    "\2\46\1\50\2\0\51\50\5\0\3\10\1\0\2\10"+
    "\1\134\26\10\11\0\1\10\5\0\3\10\1\0\7\10"+
    "\1\135\21\10\11\0\1\10\5\0\3\10\1\0\20\10"+
    "\1\136\10\10\11\0\1\10\5\0\3\10\1\0\3\10"+
    "\1\137\25\10\11\0\1\10\5\0\3\10\1\0\23\10"+
    "\1\140\5\10\11\0\1\10\5\0\3\10\1\0\16\10"+
    "\1\141\12\10\11\0\1\10\5\0\3\10\1\0\13\10"+
    "\1\142\15\10\11\0\1\10\5\0\3\10\1\0\1\143"+
    "\30\10\11\0\1\10\5\0\3\10\1\0\14\10\1\144"+
    "\14\10\11\0\1\10\5\0\3\10\1\0\7\10\1\145"+
    "\21\10\11\0\1\10\5\0\3\10\1\0\2\10\1\146"+
    "\26\10\11\0\1\10\5\0\3\10\1\0\14\10\1\147"+
    "\14\10\11\0\1\10\5\0\3\10\1\0\11\10\1\150"+
    "\17\10\11\0\1\10\5\0\3\10\1\0\4\10\1\151"+
    "\24\10\11\0\1\10\5\0\3\10\1\0\5\10\1\152"+
    "\23\10\11\0\1\10\5\0\3\10\1\0\10\10\1\153"+
    "\20\10\11\0\1\10\5\0\3\10\1\0\21\10\1\154"+
    "\7\10\11\0\1\10\5\0\3\10\1\0\2\10\1\155"+
    "\2\10\1\156\23\10\11\0\1\10\5\0\3\10\1\0"+
    "\4\10\1\157\1\10\1\160\1\161\4\10\1\162\14\10"+
    "\11\0\1\10\5\0\3\10\1\0\4\10\1\163\24\10"+
    "\11\0\1\10\5\0\3\10\1\0\11\10\1\164\7\10"+
    "\1\165\7\10\11\0\1\10\5\0\3\10\1\0\4\10"+
    "\1\166\4\10\1\167\17\10\11\0\1\10\5\0\3\10"+
    "\1\0\3\10\1\170\25\10\11\0\1\10\5\0\3\10"+
    "\1\0\16\10\1\171\12\10\11\0\1\10\5\0\3\10"+
    "\1\0\4\10\1\172\11\10\1\173\12\10\11\0\1\10"+
    "\5\0\3\10\1\0\20\10\1\174\10\10\11\0\1\10"+
    "\5\0\3\10\1\0\23\10\1\175\5\10\11\0\1\10"+
    "\5\0\3\10\1\0\1\10\1\176\7\10\1\177\17\10"+
    "\11\0\1\10\5\0\3\10\1\0\2\10\1\200\26\10"+
    "\11\0\1\10\5\0\3\10\1\0\2\10\1\201\26\10"+
    "\11\0\1\10\5\0\3\10\1\0\1\202\10\10\1\203"+
    "\11\10\1\204\5\10\11\0\1\10\5\0\3\10\1\0"+
    "\4\10\1\205\24\10\11\0\1\10\5\0\3\10\1\0"+
    "\4\10\1\206\24\10\11\0\1\10\5\0\3\10\1\0"+
    "\5\10\1\207\23\10\11\0\1\10\5\0\3\10\1\0"+
    "\2\10\1\210\26\10\11\0\1\10\5\0\3\10\1\0"+
    "\14\10\1\211\14\10\11\0\1\10\5\0\3\10\1\0"+
    "\20\10\1\212\10\10\11\0\1\10\5\0\3\10\1\0"+
    "\20\10\1\213\10\10\11\0\1\10\5\0\3\10\1\0"+
    "\1\10\1\214\27\10\11\0\1\10\5\0\3\10\1\0"+
    "\11\10\1\215\17\10\11\0\1\10\5\0\3\10\1\0"+
    "\5\10\1\216\23\10\11\0\1\10\5\0\3\10\1\0"+
    "\25\10\1\217\3\10\11\0\1\10\5\0\3\10\1\0"+
    "\5\10\1\220\23\10\11\0\1\10\5\0\3\10\1\0"+
    "\3\10\1\221\25\10\11\0\1\10\5\0\3\10\1\0"+
    "\1\222\1\10\1\223\26\10\11\0\1\10\5\0\3\10"+
    "\1\0\10\10\1\224\20\10\11\0\1\10\5\0\3\10"+
    "\1\0\1\10\1\225\27\10\11\0\1\10\5\0\3\10"+
    "\1\0\2\10\1\226\26\10\11\0\1\10\5\0\3\10"+
    "\1\0\17\10\1\227\11\10\11\0\1\10\5\0\3\10"+
    "\1\0\17\10\1\230\11\10\11\0\1\10\5\0\3\10"+
    "\1\0\2\10\1\231\26\10\11\0\1\10\5\0\3\10"+
    "\1\0\1\232\30\10\11\0\1\10\5\0\3\10\1\0"+
    "\2\10\1\233\26\10\11\0\1\10\5\0\3\10\1\0"+
    "\16\10\1\234\12\10\11\0\1\10\5\0\3\10\1\0"+
    "\11\10\1\235\17\10\11\0\1\10\5\0\3\10\1\0"+
    "\2\10\1\236\26\10\11\0\1\10\5\0\3\10\1\0"+
    "\6\10\1\237\22\10\11\0\1\10\5\0\3\10\1\0"+
    "\7\10\1\240\21\10\11\0\1\10\5\0\3\10\1\0"+
    "\2\10\1\241\15\10\1\242\10\10\11\0\1\10\5\0"+
    "\3\10\1\0\2\10\1\243\26\10\11\0\1\10\5\0"+
    "\3\10\1\0\2\10\1\244\26\10\11\0\1\10\5\0"+
    "\3\10\1\0\2\10\1\245\26\10\11\0\1\10\5\0"+
    "\3\10\1\0\11\10\1\246\17\10\11\0\1\10\5\0"+
    "\3\10\1\0\10\10\1\247\20\10\11\0\1\10\5\0"+
    "\3\10\1\0\2\10\1\250\26\10\11\0\1\10\5\0"+
    "\3\10\1\0\4\10\1\251\24\10\11\0\1\10\5\0"+
    "\3\10\1\0\5\10\1\252\23\10\11\0\1\10\5\0"+
    "\3\10\1\0\5\10\1\253\23\10\11\0\1\10\5\0"+
    "\3\10\1\0\10\10\1\254\20\10\11\0\1\10\5\0"+
    "\3\10\1\0\4\10\1\255\24\10\11\0\1\10\5\0"+
    "\3\10\1\0\1\256\30\10\11\0\1\10\5\0\3\10"+
    "\1\0\22\10\1\257\6\10\11\0\1\10\5\0\3\10"+
    "\1\0\13\10\1\260\15\10\11\0\1\10\5\0\3\10"+
    "\1\0\1\10\1\261\4\10\1\262\22\10\11\0\1\10"+
    "\5\0\3\10\1\0\5\10\1\263\23\10\11\0\1\10"+
    "\5\0\3\10\1\0\2\10\1\264\26\10\11\0\1\10"+
    "\5\0\3\10\1\0\3\10\1\265\25\10\11\0\1\10"+
    "\5\0\3\10\1\0\2\10\1\266\26\10\11\0\1\10"+
    "\5\0\3\10\1\0\2\10\1\267\26\10\11\0\1\10"+
    "\5\0\3\10\1\0\20\10\1\270\6\10\1\271\1\10"+
    "\11\0\1\10\5\0\3\10\1\0\3\10\1\272\25\10"+
    "\11\0\1\10\5\0\3\10\1\0\21\10\1\273\7\10"+
    "\11\0\1\10\5\0\3\10\1\0\3\10\1\274\25\10"+
    "\11\0\1\10\5\0\3\10\1\0\2\10\1\275\26\10"+
    "\11\0\1\10\5\0\3\10\1\0\11\10\1\276\17\10"+
    "\11\0\1\10\5\0\3\10\1\0\21\10\1\277\7\10"+
    "\11\0\1\10\5\0\3\10\1\0\6\10\1\300\22\10"+
    "\11\0\1\10\5\0\3\10\1\0\4\10\1\301\24\10"+
    "\11\0\1\10\5\0\3\10\1\0\3\10\1\302\25\10"+
    "\11\0\1\10\5\0\3\10\1\0\1\10\1\303\27\10"+
    "\11\0\1\10\5\0\3\10\1\0\4\10\1\304\24\10"+
    "\11\0\1\10\5\0\3\10\1\0\22\10\1\305\6\10"+
    "\11\0\1\10\5\0\3\10\1\0\1\10\1\306\27\10"+
    "\11\0\1\10\5\0\3\10\1\0\16\10\1\307\12\10"+
    "\11\0\1\10\5\0\3\10\1\0\2\10\1\310\26\10"+
    "\11\0\1\10\5\0\3\10\1\0\16\10\1\311\12\10"+
    "\11\0\1\10\5\0\3\10\1\0\1\10\1\312\27\10"+
    "\11\0\1\10\5\0\3\10\1\0\1\10\1\313\27\10"+
    "\11\0\1\10\5\0\3\10\1\0\15\10\1\314\13\10"+
    "\11\0\1\10\5\0\3\10\1\0\2\10\1\315\26\10"+
    "\11\0\1\10\5\0\3\10\1\0\1\316\30\10\11\0"+
    "\1\10\5\0\3\10\1\0\2\10\1\317\26\10\11\0"+
    "\1\10\5\0\3\10\1\0\6\10\1\320\22\10\11\0"+
    "\1\10\5\0\3\10\1\0\6\10\1\321\22\10\11\0"+
    "\1\10\5\0\3\10\1\0\17\10\1\322\11\10\11\0"+
    "\1\10\5\0\3\10\1\0\2\10\1\323\26\10\11\0"+
    "\1\10\5\0\3\10\1\0\2\10\1\324\26\10\11\0"+
    "\1\10\5\0\3\10\1\0\21\10\1\325\7\10\11\0"+
    "\1\10\5\0\3\10\1\0\4\10\1\326\24\10\11\0"+
    "\1\10\5\0\3\10\1\0\22\10\1\327\6\10\11\0"+
    "\1\10\5\0\3\10\1\0\4\10\1\330\24\10\11\0"+
    "\1\10\5\0\3\10\1\0\1\10\1\331\27\10\11\0"+
    "\1\10\5\0\3\10\1\0\6\10\1\332\22\10\11\0"+
    "\1\10\5\0\3\10\1\0\22\10\1\333\6\10\11\0"+
    "\1\10\5\0\3\10\1\0\4\10\1\334\24\10\11\0"+
    "\1\10\5\0\3\10\1\0\4\10\1\335\24\10\11\0"+
    "\1\10\5\0\3\10\1\0\5\10\1\336\23\10\11\0"+
    "\1\10\5\0\3\10\1\0\3\10\1\337\25\10\11\0"+
    "\1\10\5\0\3\10\1\0\2\10\1\340\26\10\11\0"+
    "\1\10\5\0\3\10\1\0\14\10\1\341\14\10\11\0"+
    "\1\10\5\0\3\10\1\0\2\10\1\342\26\10\11\0"+
    "\1\10\5\0\3\10\1\0\4\10\1\343\24\10\11\0"+
    "\1\10\5\0\3\10\1\0\2\10\1\344\26\10\11\0"+
    "\1\10\5\0\3\10\1\0\2\10\1\345\26\10\11\0"+
    "\1\10\5\0\3\10\1\0\4\10\1\346\24\10\11\0"+
    "\1\10\5\0\3\10\1\0\1\10\1\347\27\10\11\0"+
    "\1\10\5\0\3\10\1\0\4\10\1\350\24\10\11\0"+
    "\1\10\5\0\3\10\1\0\21\10\1\351\7\10\11\0"+
    "\1\10\5\0\3\10\1\0\4\10\1\352\24\10\11\0"+
    "\1\10\5\0\3\10\1\0\3\10\1\353\25\10\11\0"+
    "\1\10\5\0\3\10\1\0\7\10\1\354\21\10\11\0"+
    "\1\10\5\0\3\10\1\0\3\10\1\355\25\10\11\0"+
    "\1\10\5\0\3\10\1\0\2\10\1\356\26\10\11\0"+
    "\1\10\5\0\3\10\1\0\11\10\1\357\17\10\11\0"+
    "\1\10\5\0\3\10\1\0\5\10\1\360\23\10\11\0"+
    "\1\10\5\0\3\10\1\0\2\10\1\361\26\10\11\0"+
    "\1\10\5\0\3\10\1\0\2\10\1\362\26\10\11\0"+
    "\1\10\5\0\3\10\1\0\16\10\1\363\12\10\11\0"+
    "\1\10\5\0\3\10\1\0\1\10\1\364\27\10\11\0"+
    "\1\10\5\0\3\10\1\0\2\10\1\365\26\10\11\0"+
    "\1\10\5\0\3\10\1\0\6\10\1\366\22\10\11\0"+
    "\1\10\5\0\3\10\1\0\2\10\1\367\26\10\11\0"+
    "\1\10\5\0\3\10\1\0\1\10\1\370\27\10\11\0"+
    "\1\10\5\0\3\10\1\0\1\10\1\371\27\10\11\0"+
    "\1\10\5\0\3\10\1\0\2\10\1\372\26\10\11\0"+
    "\1\10\5\0\3\10\1\0\1\10\1\373\27\10\11\0"+
    "\1\10\5\0\3\10\1\0\11\10\1\374\17\10\11\0"+
    "\1\10\5\0\3\10\1\0\4\10\1\375\24\10\11\0"+
    "\1\10\5\0\3\10\1\0\21\10\1\376\7\10\11\0"+
    "\1\10\5\0\3\10\1\0\6\10\1\377\22\10\11\0"+
    "\1\10\5\0\3\10\1\0\25\10\1\u0100\3\10\11\0"+
    "\1\10\5\0\3\10\1\0\1\u0101\30\10\11\0\1\10"+
    "\5\0\3\10\1\0\6\10\1\u0102\22\10\11\0\1\10"+
    "\5\0\3\10\1\0\2\10\1\u0103\26\10\11\0\1\10"+
    "\5\0\3\10\1\0\2\10\1\u0104\26\10\11\0\1\10"+
    "\5\0\3\10\1\0\4\10\1\u0105\24\10\11\0\1\10"+
    "\5\0\3\10\1\0\7\10\1\u0106\21\10\11\0\1\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8272];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\2\11\27\1\5\11\2\1\1\11"+
    "\1\1\1\11\61\1\3\11\253\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

  /** A string builder for scanning String-literals. */
  private StringBuilder string = new StringBuilder();
  /** The start-position of the String. */
  private int stringStart;
  
  /** Message */ 
  private static final String END_OF_FILE="End of File";
  
  /** Message */
  private static final String ILLEGAL_CHARACTER="Illegal Character";
  
  /** Message */
  private static final String ILLEGAL_STRING_CONSTANTS="Illegal String Constants";
  
  /**
   * Creates a symbol without value.
   * @param type The type of the symbol.
   * @return A Symbol.
   */
  private Symbol symbol(int type, String name) 
  {
    return new TerminalSymbol(type, name, yyline+1, yycolumn);
  }
  
  /**
   * Creates a symbol with value.
   * @param type The type of the symbol.
   * @param value The value of the symbol.
   * @return A Symbol.
   */
  private Symbol symbol(int type, String name, Object value, int length) 
  {
    return new TerminalSymbol(type, name, yyline+1, yycolumn, value);
  }
    
  /** 
   * This method is called if the scanner cannot scan the input
   */
  private Symbol fail()
  {
    if (yystate() == READ_STRING)
    {
      return symbol(ILLEGAL, ILLEGAL_STRING_CONSTANTS, yytext(), 0);
    } 
    else 
    {
      return symbol(ILLEGAL, ILLEGAL_CHARACTER, yytext(), yytext().length());
    }
  }
  



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3662) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return symbol(EOF, END_OF_FILE);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return fail();
            }
          case 85: break;
          case 2: 
            { yyline++;
            }
          case 86: break;
          case 3: 
            { /* ignore */
            }
          case 87: break;
          case 4: 
            { return symbol(IDENTIFIER, "Identifier", yytext(), yytext().length());
            }
          case 88: break;
          case 5: 
            { return symbol(INTEGER_LITERAL, "Integer", Integer.parseInt(yytext()), yytext().length());
            }
          case 89: break;
          case 6: 
            { return symbol(DOT, yytext());
            }
          case 90: break;
          case 7: 
            { return symbol(L_PARENT, yytext());
            }
          case 91: break;
          case 8: 
            { return symbol(R_PARENT, yytext());
            }
          case 92: break;
          case 9: 
            { return symbol(SEMICOLON, yytext());
            }
          case 93: break;
          case 10: 
            { return symbol(COMMA, yytext());
            }
          case 94: break;
          case 11: 
            { return symbol(EQUAL, yytext());
            }
          case 95: break;
          case 12: 
            { return symbol(LESS, yytext());
            }
          case 96: break;
          case 13: 
            { return symbol(GREATER, yytext());
            }
          case 97: break;
          case 14: 
            { string.setLength(0); yybegin(READ_STRING); stringStart = yychar;
            }
          case 98: break;
          case 15: 
            { string.append( yytext() );
            }
          case 99: break;
          case 16: 
            { yybegin(YYINITIAL); 
                       return symbol(STRING_LITERAL, "String", string.toString(), string.length());
            }
          case 100: break;
          case 17: 
            { String comment;
                    comment = yytext().substring(2);
                    return symbol(COMMENT, "Comment", comment, comment.length());
            }
          case 101: break;
          case 18: 
            { return symbol(NUMBER_LITERAL, "Number", new BigDecimal(yytext()), yytext().length());
            }
          case 102: break;
          case 19: 
            { return symbol(AS, yytext());
            }
          case 103: break;
          case 20: 
            { return symbol(IS, yytext());
            }
          case 104: break;
          case 21: 
            { return symbol(OR, yytext());
            }
          case 105: break;
          case 22: 
            { return symbol(ON, yytext());
            }
          case 106: break;
          case 23: 
            { return symbol(LESS_EQUAL, yytext());
            }
          case 107: break;
          case 24: 
            { return symbol(NOT_EQUAL, yytext());
            }
          case 108: break;
          case 25: 
            { return symbol(GREATER_EQUAL, yytext());
            }
          case 109: break;
          case 26: 
            { return symbol(ROW, yytext());
            }
          case 110: break;
          case 27: 
            { return symbol(END, yytext());
            }
          case 111: break;
          case 28: 
            { return symbol(AND, yytext());
            }
          case 112: break;
          case 29: 
            { return symbol(ALL, yytext());
            }
          case 113: break;
          case 30: 
            { return symbol(NOT, yytext());
            }
          case 114: break;
          case 31: 
            { return symbol(SET, yytext());
            }
          case 115: break;
          case 32: 
            { return symbol(BIT, yytext());
            }
          case 116: break;
          case 33: 
            { return symbol(USE, yytext());
            }
          case 117: break;
          case 34: 
            { return symbol(FOR, yytext());
            }
          case 118: break;
          case 35: 
            { return symbol(KEY, yytext());
            }
          case 119: break;
          case 36: 
            { return symbol(CASE, yytext());
            }
          case 120: break;
          case 37: 
            { return symbol(CLOB, yytext());
            }
          case 121: break;
          case 38: 
            { return symbol(CHAR, yytext());
            }
          case 122: break;
          case 39: 
            { return symbol(EACH, yytext());
            }
          case 123: break;
          case 40: 
            { return symbol(ELSE, yytext());
            }
          case 124: break;
          case 41: 
            { return symbol(TIME, yytext());
            }
          case 125: break;
          case 42: 
            { return symbol(THEN, yytext());
            }
          case 126: break;
          case 43: 
            { return symbol(THIS, yytext());
            }
          case 127: break;
          case 44: 
            { return symbol(INTO, yytext());
            }
          case 128: break;
          case 45: 
            { return symbol(NULL, yytext());
            }
          case 129: break;
          case 46: 
            { return symbol(BLOB, yytext());
            }
          case 130: break;
          case 47: 
            { return symbol(LEFT, yytext());
            }
          case 131: break;
          case 48: 
            { return symbol(VIEW, yytext());
            }
          case 132: break;
          case 49: 
            { return symbol(WHEN, yytext());
            }
          case 133: break;
          case 50: 
            { return symbol(DATE, yytext());
            }
          case 134: break;
          case 51: 
            { return symbol(FROM, yytext());
            }
          case 135: break;
          case 52: 
            { return symbol(FULL, yytext());
            }
          case 136: break;
          case 53: 
            { return symbol(JOIN, yytext());
            }
          case 137: break;
          case 54: 
            { return symbol(RIGHT, yytext());
            }
          case 138: break;
          case 55: 
            { return symbol(AFTER, yytext());
            }
          case 139: break;
          case 56: 
            { return symbol(TABLE, yytext());
            }
          case 140: break;
          case 57: 
            { return symbol(INNER, yytext());
            }
          case 141: break;
          case 58: 
            { return symbol(INDEX, yytext());
            }
          case 142: break;
          case 59: 
            { return symbol(BEGIN, yytext());
            }
          case 143: break;
          case 60: 
            { return symbol(WHERE, yytext());
            }
          case 144: break;
          case 61: 
            { return symbol(OUTER, yytext());
            }
          case 145: break;
          case 62: 
            { return symbol(UNION, yytext());
            }
          case 146: break;
          case 63: 
            { return symbol(FLOAT, yytext());
            }
          case 147: break;
          case 64: 
            { return symbol(CREATE, yytext());
            }
          case 148: break;
          case 65: 
            { return symbol(INSERT, yytext());
            }
          case 149: break;
          case 66: 
            { return symbol(NUMBER, yytext());
            }
          case 150: break;
          case 67: 
            { return symbol(SELECT, yytext());
            }
          case 151: break;
          case 68: 
            { return symbol(BIGINT, yytext());
            }
          case 152: break;
          case 69: 
            { return symbol(VALUES, yytext());
            }
          case 153: break;
          case 70: 
            { return symbol(DELETE, yytext());
            }
          case 154: break;
          case 71: 
            { return symbol(UNIQUE, yytext());
            }
          case 155: break;
          case 72: 
            { return symbol(UPDATE, yytext());
            }
          case 156: break;
          case 73: 
            { return symbol(CASCADE, yytext());
            }
          case 157: break;
          case 74: 
            { return symbol(EXECUTE, yytext());
            }
          case 158: break;
          case 75: 
            { return symbol(TRIGGER, yytext());
            }
          case 159: break;
          case 76: 
            { return symbol(INTEGER, yytext());
            }
          case 160: break;
          case 77: 
            { return symbol(VARCHAR, yytext());
            }
          case 161: break;
          case 78: 
            { return symbol(DECIMAL, yytext());
            }
          case 162: break;
          case 79: 
            { return symbol(DEFAULT, yytext());
            }
          case 163: break;
          case 80: 
            { return symbol(FOREIGN, yytext());
            }
          case 164: break;
          case 81: 
            { return symbol(PRIMARY, yytext());
            }
          case 165: break;
          case 82: 
            { return symbol(DATETIME, yytext());
            }
          case 166: break;
          case 83: 
            { return symbol(STATEMENT, yytext());
            }
          case 167: break;
          case 84: 
            { return symbol(REFERENCES, yytext());
            }
          case 168: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
