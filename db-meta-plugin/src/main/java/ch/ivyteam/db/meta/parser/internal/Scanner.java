/* The following code was generated by JFlex 1.4.2 on 5/26/23, 3:35 PM */

package ch.ivyteam.db.meta.parser.internal;

import java_cup.runtime.*;

import java.math.BigDecimal;
import static ch.ivyteam.db.meta.parser.internal.Symbols.*;

/** 
 * This class is a scanner for IvyScript.
 */
@SuppressWarnings("all")


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 5/26/23, 3:35 PM from the specification file
 * <tt>/home/alex/git/maven-plugins/db-meta-plugin/grammar/Scanner.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int READ_STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\3\1\2\1\0\1\3\1\1\16\6\4\0\1\3\3\0"+
    "\1\5\2\0\1\51\1\42\1\43\2\0\1\45\1\4\1\10\1\0"+
    "\12\7\1\0\1\44\1\47\1\46\1\50\2\0\1\14\1\21\1\11"+
    "\1\25\1\13\1\34\1\27\1\30\1\16\1\41\1\37\1\22\1\32"+
    "\1\17\1\31\1\35\1\40\1\12\1\20\1\15\1\33\1\23\1\24"+
    "\1\26\1\36\1\5\4\0\1\5\1\0\32\5\4\0\41\6\2\0"+
    "\4\5\4\0\1\5\2\0\1\6\7\0\1\5\4\0\1\5\5\0"+
    "\27\5\1\0\37\5\1\0\u01ca\5\4\0\14\5\16\0\5\5\7\0"+
    "\1\5\1\0\1\5\21\0\160\6\5\5\1\0\2\5\2\0\4\5"+
    "\1\0\1\5\6\0\1\5\1\0\3\5\1\0\1\5\1\0\24\5"+
    "\1\0\123\5\1\0\213\5\1\0\5\6\2\0\246\5\1\0\46\5"+
    "\2\0\1\5\6\0\51\5\6\0\1\5\1\0\55\6\1\0\1\6"+
    "\1\0\2\6\1\0\2\6\1\0\1\6\10\0\33\5\4\0\4\5"+
    "\15\0\6\6\5\0\1\5\4\0\13\6\1\0\1\6\3\0\53\5"+
    "\37\6\4\0\2\5\1\6\143\5\1\0\1\5\10\6\1\0\6\6"+
    "\2\5\2\6\1\0\4\6\2\5\12\6\3\5\2\0\1\5\17\0"+
    "\1\6\1\5\1\6\36\5\33\6\2\0\131\5\13\6\1\5\16\0"+
    "\12\6\41\5\11\6\2\5\4\0\1\5\2\0\1\6\30\5\4\6"+
    "\1\5\11\6\1\5\3\6\1\5\5\6\22\0\31\5\3\6\4\0"+
    "\13\5\65\0\25\5\1\0\22\5\13\0\61\6\66\5\3\6\1\5"+
    "\22\6\1\5\7\6\12\5\2\6\2\0\12\6\1\0\20\5\3\6"+
    "\1\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0\1\5"+
    "\3\0\4\5\2\0\1\6\1\5\7\6\2\0\2\6\2\0\3\6"+
    "\1\5\10\0\1\6\4\0\2\5\1\0\3\5\2\6\2\0\12\6"+
    "\4\5\7\0\2\5\1\0\1\6\2\0\3\6\1\0\6\5\4\0"+
    "\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0\2\5\1\0"+
    "\2\5\2\0\1\6\1\0\5\6\4\0\2\6\2\0\3\6\3\0"+
    "\1\6\7\0\4\5\1\0\1\5\7\0\14\6\3\5\1\6\13\0"+
    "\3\6\1\0\11\5\1\0\3\5\1\0\26\5\1\0\7\5\1\0"+
    "\2\5\1\0\5\5\2\0\1\6\1\5\10\6\1\0\3\6\1\0"+
    "\3\6\2\0\1\5\17\0\2\5\2\6\2\0\12\6\1\0\1\5"+
    "\7\0\1\5\6\6\1\0\3\6\1\0\10\5\2\0\2\5\2\0"+
    "\26\5\1\0\7\5\1\0\2\5\1\0\5\5\2\0\1\6\1\5"+
    "\7\6\2\0\2\6\2\0\3\6\7\0\3\6\4\0\2\5\1\0"+
    "\3\5\2\6\2\0\12\6\1\0\1\5\20\0\1\6\1\5\1\0"+
    "\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0"+
    "\2\5\3\0\2\5\3\0\3\5\3\0\14\5\4\0\5\6\3\0"+
    "\3\6\1\0\4\6\2\0\1\5\6\0\1\6\16\0\12\6\11\0"+
    "\1\5\6\0\5\6\10\5\1\0\3\5\1\0\27\5\1\0\20\5"+
    "\3\0\1\5\7\6\1\0\3\6\1\0\4\6\7\0\2\6\1\0"+
    "\3\5\5\0\2\5\2\6\2\0\12\6\20\0\1\5\3\6\1\0"+
    "\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0\5\5\2\0"+
    "\1\6\1\5\7\6\1\0\3\6\1\0\4\6\7\0\2\6\7\0"+
    "\1\5\1\0\2\5\2\6\2\0\12\6\1\0\2\5\15\0\4\6"+
    "\11\5\1\0\3\5\1\0\51\5\2\6\1\5\7\6\1\0\3\6"+
    "\1\0\4\6\1\5\5\0\3\5\1\6\7\0\3\5\2\6\2\0"+
    "\12\6\12\0\6\5\1\0\3\6\1\0\22\5\3\0\30\5\1\0"+
    "\11\5\1\0\1\5\2\0\7\5\3\0\1\6\4\0\6\6\1\0"+
    "\1\6\1\0\10\6\6\0\12\6\2\0\2\6\15\0\60\5\1\6"+
    "\2\5\7\6\4\0\10\5\10\6\1\0\12\6\47\0\2\5\1\0"+
    "\1\5\1\0\5\5\1\0\30\5\1\0\1\5\1\0\12\5\1\6"+
    "\2\5\11\6\1\5\2\0\5\5\1\0\1\5\1\0\6\6\2\0"+
    "\12\6\2\0\4\5\40\0\1\5\27\0\2\6\6\0\12\6\13\0"+
    "\1\6\1\0\1\6\1\0\1\6\4\0\2\6\10\5\1\0\44\5"+
    "\4\0\24\6\1\0\2\6\5\5\13\6\1\0\44\6\11\0\1\6"+
    "\71\0\53\5\24\6\1\5\12\6\6\0\6\5\4\6\4\5\3\6"+
    "\1\5\3\6\2\5\7\6\3\5\4\6\15\5\14\6\1\5\17\6"+
    "\2\0\46\5\1\0\1\5\5\0\1\5\2\0\53\5\1\0\u014d\5"+
    "\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\51\5"+
    "\1\0\4\5\2\0\41\5\1\0\4\5\2\0\7\5\1\0\1\5"+
    "\1\0\4\5\2\0\17\5\1\0\71\5\1\0\4\5\2\0\103\5"+
    "\2\0\3\6\40\0\20\5\20\0\126\5\2\0\6\5\3\0\u026c\5"+
    "\2\0\21\5\1\0\32\5\5\0\113\5\3\0\13\5\7\0\15\5"+
    "\1\0\4\5\3\6\13\0\22\5\3\6\13\0\22\5\2\6\14\0"+
    "\15\5\1\0\3\5\1\0\2\6\14\0\64\5\40\6\3\0\1\5"+
    "\3\0\2\5\1\6\2\0\12\6\41\0\4\6\1\0\12\6\6\0"+
    "\131\5\7\0\5\5\2\6\42\5\1\6\1\5\5\0\106\5\12\0"+
    "\37\5\1\0\14\6\4\0\14\6\12\0\12\6\36\5\2\0\5\5"+
    "\13\0\54\5\4\0\32\5\6\0\12\6\46\0\27\5\5\6\4\0"+
    "\65\5\12\6\1\0\35\6\2\0\13\6\6\0\12\6\15\0\1\5"+
    "\10\0\16\6\1\0\2\6\77\0\5\6\57\5\21\6\7\5\4\0"+
    "\12\6\21\0\11\6\14\0\3\6\36\5\15\6\2\5\12\6\54\5"+
    "\16\6\14\0\44\5\24\6\10\0\12\6\3\0\3\5\12\6\44\5"+
    "\2\0\11\5\7\0\53\5\2\0\3\5\20\0\3\6\1\0\25\6"+
    "\4\5\1\6\6\5\1\6\2\5\3\6\1\5\5\0\300\5\72\6"+
    "\1\0\5\6\u0116\5\2\0\6\5\2\0\46\5\2\0\6\5\2\0"+
    "\10\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0\37\5\2\0"+
    "\65\5\1\0\7\5\1\0\1\5\3\0\3\5\1\0\7\5\3\0"+
    "\4\5\2\0\6\5\4\0\15\5\5\0\3\5\1\0\7\5\16\0"+
    "\5\6\32\0\5\6\20\0\2\5\23\0\1\5\13\0\5\6\1\0"+
    "\12\6\1\0\1\5\15\0\1\5\20\0\15\5\3\0\40\5\20\0"+
    "\15\6\4\0\1\6\3\0\14\6\21\0\1\5\4\0\1\5\2\0"+
    "\12\5\1\0\1\5\3\0\5\5\6\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\0\13\5\2\0\4\5\5\0\5\5\4\0"+
    "\1\5\21\0\51\5\u0a77\0\57\5\1\0\57\5\1\0\205\5\6\0"+
    "\4\5\3\6\2\5\14\0\46\5\1\0\1\5\5\0\1\5\2\0"+
    "\70\5\7\0\1\5\17\0\1\6\27\5\11\0\7\5\1\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5"+
    "\1\0\7\5\1\0\40\6\57\0\1\5\u01d5\0\3\5\31\0\11\5"+
    "\6\6\1\0\5\5\2\0\5\5\4\0\126\5\2\0\2\6\2\0"+
    "\3\5\1\0\132\5\1\0\4\5\5\0\53\5\1\0\136\5\21\0"+
    "\40\5\60\0\20\5\u0200\0\u19c0\5\100\0\u51fd\5\3\0\u048d\5\103\0"+
    "\56\5\2\0\u010d\5\3\0\20\5\12\6\2\5\24\0\57\5\1\6"+
    "\4\0\12\6\1\0\37\5\2\6\120\5\2\6\45\0\11\5\2\0"+
    "\147\5\2\0\65\5\2\0\11\5\52\0\15\5\1\6\3\5\1\6"+
    "\4\5\1\6\27\5\5\6\4\0\1\6\13\0\1\5\7\0\64\5"+
    "\14\0\2\6\62\5\22\6\12\0\12\6\6\0\22\6\6\5\3\0"+
    "\1\5\1\0\2\5\13\6\34\5\10\6\2\0\27\5\15\6\14\0"+
    "\35\5\3\0\4\6\57\5\16\6\16\0\1\5\12\6\6\0\5\5"+
    "\1\6\12\5\12\6\5\5\1\0\51\5\16\6\11\0\3\5\1\6"+
    "\10\5\2\6\2\0\12\6\6\0\27\5\3\0\1\5\3\6\62\5"+
    "\1\6\1\5\3\6\2\5\2\6\5\5\2\6\1\5\1\6\1\5"+
    "\30\0\3\5\2\0\13\5\5\6\2\0\3\5\2\6\12\0\6\5"+
    "\2\0\6\5\2\0\6\5\11\0\7\5\1\0\7\5\1\0\53\5"+
    "\1\0\16\5\6\0\163\5\10\6\1\0\2\6\2\0\12\6\6\0"+
    "\u2ba4\5\14\0\27\5\4\0\61\5\u2104\0\u016e\5\2\0\152\5\46\0"+
    "\7\5\14\0\5\5\5\0\1\5\1\6\12\5\1\0\15\5\1\0"+
    "\5\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0\154\5\41\0"+
    "\u016b\5\22\0\100\5\2\0\66\5\50\0\15\5\3\0\20\6\20\0"+
    "\20\6\3\0\2\5\30\0\3\5\31\0\1\5\6\0\5\5\1\0"+
    "\207\5\2\0\1\6\4\0\1\5\13\0\12\6\7\0\32\5\4\0"+
    "\1\5\1\0\32\5\13\0\131\5\3\0\6\5\2\0\6\5\2\0"+
    "\6\5\2\0\3\5\3\0\2\5\3\0\2\5\22\0\3\6\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\23\4\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\14\4\1\23\7\4"+
    "\1\24\15\4\1\25\1\26\13\4\1\27\1\30\1\31"+
    "\6\4\1\32\1\4\1\33\2\4\1\34\1\35\12\4"+
    "\1\36\2\4\1\37\3\4\1\40\15\4\1\41\3\4"+
    "\1\42\2\4\1\43\3\4\1\44\1\45\1\46\2\4"+
    "\1\47\1\50\4\4\1\51\1\52\1\53\1\4\1\54"+
    "\3\4\1\55\5\4\1\56\1\57\2\4\1\60\1\4"+
    "\1\61\3\4\1\62\4\4\1\63\2\4\1\64\1\4"+
    "\1\65\3\4\1\66\1\4\1\67\1\4\1\70\1\4"+
    "\1\71\1\4\1\72\3\4\1\73\3\4\1\74\4\4"+
    "\1\75\1\76\2\4\1\77\2\4\1\100\5\4\1\101"+
    "\1\102\1\103\1\4\1\104\1\4\1\105\1\4\1\106"+
    "\2\4\1\107\1\110\2\4\1\111\1\4\1\112\1\113"+
    "\1\114\1\4\1\115\1\116\1\117\1\4\1\120\1\121"+
    "\2\4\1\122\1\4\1\123\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\124\0\124\0\250\0\322"+
    "\0\374\0\u0126\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222"+
    "\0\u024c\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372"+
    "\0\u039c\0\u03c6\0\u03f0\0\u041a\0\u0444\0\124\0\124\0\124"+
    "\0\124\0\124\0\u046e\0\u0498\0\124\0\u04c2\0\124\0\u04ec"+
    "\0\u0126\0\u0516\0\u0540\0\u056a\0\u0594\0\u05be\0\u05e8\0\u0612"+
    "\0\u063c\0\u0666\0\u0690\0\u06ba\0\u06e4\0\322\0\u070e\0\u0738"+
    "\0\u0762\0\u078c\0\u07b6\0\u07e0\0\u080a\0\322\0\u0834\0\u085e"+
    "\0\u0888\0\u08b2\0\u08dc\0\u0906\0\u0930\0\u095a\0\u0984\0\u09ae"+
    "\0\u09d8\0\u0a02\0\u0a2c\0\322\0\322\0\u0a56\0\u0a80\0\u0aaa"+
    "\0\u0ad4\0\u0afe\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6\0\u0bd0\0\u0bfa"+
    "\0\124\0\124\0\124\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc"+
    "\0\u0cf6\0\322\0\u0d20\0\322\0\u0d4a\0\u0d74\0\322\0\322"+
    "\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c\0\u0e46\0\u0e70\0\u0e9a\0\u0ec4"+
    "\0\u0eee\0\u0f18\0\322\0\u0f42\0\u0f6c\0\322\0\u0f96\0\u0fc0"+
    "\0\u0fea\0\322\0\u1014\0\u103e\0\u1068\0\u1092\0\u10bc\0\u10e6"+
    "\0\u1110\0\u113a\0\u1164\0\u118e\0\u11b8\0\u11e2\0\u120c\0\322"+
    "\0\u1236\0\u1260\0\u128a\0\u12b4\0\u12de\0\u1308\0\322\0\u1332"+
    "\0\u135c\0\u1386\0\322\0\322\0\322\0\u13b0\0\u13da\0\322"+
    "\0\322\0\u1404\0\u142e\0\u1458\0\u1482\0\322\0\322\0\322"+
    "\0\u14ac\0\322\0\u14d6\0\u1500\0\u152a\0\322\0\u1554\0\u157e"+
    "\0\u15a8\0\u15d2\0\u15fc\0\322\0\322\0\u1626\0\u1650\0\322"+
    "\0\u167a\0\322\0\u16a4\0\u16ce\0\u16f8\0\u1722\0\u174c\0\u1776"+
    "\0\u17a0\0\u17ca\0\322\0\u17f4\0\u181e\0\322\0\u1848\0\322"+
    "\0\u1872\0\u189c\0\u18c6\0\322\0\u18f0\0\322\0\u191a\0\322"+
    "\0\u1944\0\322\0\u196e\0\322\0\u1998\0\u19c2\0\u19ec\0\322"+
    "\0\u1a16\0\u1a40\0\u1a6a\0\322\0\u1a94\0\u1abe\0\u1ae8\0\u1b12"+
    "\0\322\0\322\0\u1b3c\0\u1b66\0\322\0\u1b90\0\u1bba\0\322"+
    "\0\u1be4\0\u1c0e\0\u1c38\0\u1c62\0\u1c8c\0\322\0\322\0\322"+
    "\0\u1cb6\0\322\0\u1ce0\0\322\0\u1d0a\0\322\0\u1d34\0\u1d5e"+
    "\0\322\0\322\0\u1d88\0\u1db2\0\322\0\u1ddc\0\322\0\322"+
    "\0\322\0\u1e06\0\322\0\322\0\322\0\u1e30\0\322\0\322"+
    "\0\u1e5a\0\u1e84\0\322\0\u1eae\0\322\0\322";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\3\10\1\30"+
    "\1\10\1\31\1\32\1\33\1\10\1\34\1\10\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\51\46\1\47\54\0\1\5\53\0\1\50\52\0\3\10"+
    "\1\0\31\10\17\0\1\11\1\51\50\0\1\51\47\0"+
    "\3\10\1\0\1\10\1\52\1\10\1\53\5\10\1\54"+
    "\5\10\1\55\11\10\15\0\3\10\1\0\2\10\1\56"+
    "\2\10\1\57\12\10\1\60\10\10\15\0\3\10\1\0"+
    "\3\10\1\61\2\10\1\62\2\10\1\63\3\10\1\64"+
    "\13\10\15\0\3\10\1\0\6\10\1\65\1\66\1\10"+
    "\1\67\11\10\1\70\5\10\15\0\3\10\1\0\1\10"+
    "\1\71\1\10\1\72\1\10\1\73\11\10\1\74\11\10"+
    "\15\0\3\10\1\0\6\10\1\75\1\76\21\10\15\0"+
    "\3\10\1\0\20\10\1\77\1\10\1\100\6\10\15\0"+
    "\3\10\1\0\2\10\1\101\1\10\1\102\24\10\15\0"+
    "\3\10\1\0\2\10\1\103\2\10\1\104\3\10\1\105"+
    "\17\10\15\0\3\10\1\0\2\10\1\106\26\10\15\0"+
    "\3\10\1\0\3\10\1\107\1\10\1\110\23\10\15\0"+
    "\3\10\1\0\17\10\1\111\11\10\15\0\3\10\1\0"+
    "\2\10\1\112\1\113\25\10\15\0\3\10\1\0\1\10"+
    "\1\114\4\10\1\115\13\10\1\116\6\10\15\0\3\10"+
    "\1\0\6\10\1\117\1\120\14\10\1\121\4\10\15\0"+
    "\3\10\1\0\1\10\1\122\7\10\1\123\6\10\1\124"+
    "\1\10\1\125\6\10\15\0\3\10\1\0\1\10\1\126"+
    "\27\10\15\0\3\10\1\0\2\10\1\127\26\10\15\0"+
    "\3\10\1\0\20\10\1\130\10\10\56\0\1\131\1\0"+
    "\1\132\47\0\1\133\3\0\51\46\1\0\1\50\2\0"+
    "\47\50\5\0\3\10\1\0\2\10\1\134\26\10\15\0"+
    "\3\10\1\0\7\10\1\135\21\10\15\0\3\10\1\0"+
    "\20\10\1\136\10\10\15\0\3\10\1\0\3\10\1\137"+
    "\25\10\15\0\3\10\1\0\23\10\1\140\5\10\15\0"+
    "\3\10\1\0\16\10\1\141\12\10\15\0\3\10\1\0"+
    "\13\10\1\142\15\10\15\0\3\10\1\0\1\143\30\10"+
    "\15\0\3\10\1\0\14\10\1\144\14\10\15\0\3\10"+
    "\1\0\7\10\1\145\21\10\15\0\3\10\1\0\2\10"+
    "\1\146\26\10\15\0\3\10\1\0\14\10\1\147\14\10"+
    "\15\0\3\10\1\0\11\10\1\150\17\10\15\0\3\10"+
    "\1\0\4\10\1\151\24\10\15\0\3\10\1\0\5\10"+
    "\1\152\23\10\15\0\3\10\1\0\10\10\1\153\20\10"+
    "\15\0\3\10\1\0\21\10\1\154\7\10\15\0\3\10"+
    "\1\0\2\10\1\155\2\10\1\156\23\10\15\0\3\10"+
    "\1\0\4\10\1\157\1\10\1\160\1\161\4\10\1\162"+
    "\14\10\15\0\3\10\1\0\4\10\1\163\24\10\15\0"+
    "\3\10\1\0\11\10\1\164\7\10\1\165\7\10\15\0"+
    "\3\10\1\0\4\10\1\166\4\10\1\167\17\10\15\0"+
    "\3\10\1\0\3\10\1\170\25\10\15\0\3\10\1\0"+
    "\16\10\1\171\12\10\15\0\3\10\1\0\4\10\1\172"+
    "\11\10\1\173\12\10\15\0\3\10\1\0\20\10\1\174"+
    "\10\10\15\0\3\10\1\0\23\10\1\175\5\10\15\0"+
    "\3\10\1\0\1\10\1\176\7\10\1\177\17\10\15\0"+
    "\3\10\1\0\2\10\1\200\26\10\15\0\3\10\1\0"+
    "\2\10\1\201\26\10\15\0\3\10\1\0\1\202\10\10"+
    "\1\203\11\10\1\204\5\10\15\0\3\10\1\0\4\10"+
    "\1\205\24\10\15\0\3\10\1\0\4\10\1\206\24\10"+
    "\15\0\3\10\1\0\5\10\1\207\23\10\15\0\3\10"+
    "\1\0\2\10\1\210\26\10\15\0\3\10\1\0\14\10"+
    "\1\211\14\10\15\0\3\10\1\0\20\10\1\212\10\10"+
    "\15\0\3\10\1\0\20\10\1\213\10\10\15\0\3\10"+
    "\1\0\1\10\1\214\27\10\15\0\3\10\1\0\11\10"+
    "\1\215\17\10\15\0\3\10\1\0\5\10\1\216\23\10"+
    "\15\0\3\10\1\0\25\10\1\217\3\10\15\0\3\10"+
    "\1\0\5\10\1\220\23\10\15\0\3\10\1\0\3\10"+
    "\1\221\25\10\15\0\3\10\1\0\1\222\1\10\1\223"+
    "\26\10\15\0\3\10\1\0\10\10\1\224\20\10\15\0"+
    "\3\10\1\0\1\10\1\225\27\10\15\0\3\10\1\0"+
    "\2\10\1\226\26\10\15\0\3\10\1\0\17\10\1\227"+
    "\11\10\15\0\3\10\1\0\17\10\1\230\11\10\15\0"+
    "\3\10\1\0\2\10\1\231\26\10\15\0\3\10\1\0"+
    "\1\232\30\10\15\0\3\10\1\0\2\10\1\233\26\10"+
    "\15\0\3\10\1\0\16\10\1\234\12\10\15\0\3\10"+
    "\1\0\11\10\1\235\17\10\15\0\3\10\1\0\2\10"+
    "\1\236\26\10\15\0\3\10\1\0\6\10\1\237\22\10"+
    "\15\0\3\10\1\0\7\10\1\240\21\10\15\0\3\10"+
    "\1\0\2\10\1\241\15\10\1\242\10\10\15\0\3\10"+
    "\1\0\2\10\1\243\26\10\15\0\3\10\1\0\2\10"+
    "\1\244\26\10\15\0\3\10\1\0\2\10\1\245\26\10"+
    "\15\0\3\10\1\0\11\10\1\246\17\10\15\0\3\10"+
    "\1\0\10\10\1\247\20\10\15\0\3\10\1\0\2\10"+
    "\1\250\26\10\15\0\3\10\1\0\4\10\1\251\24\10"+
    "\15\0\3\10\1\0\5\10\1\252\23\10\15\0\3\10"+
    "\1\0\5\10\1\253\23\10\15\0\3\10\1\0\10\10"+
    "\1\254\20\10\15\0\3\10\1\0\4\10\1\255\24\10"+
    "\15\0\3\10\1\0\1\256\30\10\15\0\3\10\1\0"+
    "\22\10\1\257\6\10\15\0\3\10\1\0\13\10\1\260"+
    "\15\10\15\0\3\10\1\0\1\10\1\261\4\10\1\262"+
    "\22\10\15\0\3\10\1\0\5\10\1\263\23\10\15\0"+
    "\3\10\1\0\2\10\1\264\26\10\15\0\3\10\1\0"+
    "\3\10\1\265\25\10\15\0\3\10\1\0\2\10\1\266"+
    "\26\10\15\0\3\10\1\0\2\10\1\267\26\10\15\0"+
    "\3\10\1\0\20\10\1\270\6\10\1\271\1\10\15\0"+
    "\3\10\1\0\3\10\1\272\25\10\15\0\3\10\1\0"+
    "\21\10\1\273\7\10\15\0\3\10\1\0\3\10\1\274"+
    "\25\10\15\0\3\10\1\0\2\10\1\275\26\10\15\0"+
    "\3\10\1\0\11\10\1\276\17\10\15\0\3\10\1\0"+
    "\21\10\1\277\7\10\15\0\3\10\1\0\6\10\1\300"+
    "\22\10\15\0\3\10\1\0\4\10\1\301\24\10\15\0"+
    "\3\10\1\0\3\10\1\302\25\10\15\0\3\10\1\0"+
    "\1\10\1\303\27\10\15\0\3\10\1\0\4\10\1\304"+
    "\24\10\15\0\3\10\1\0\22\10\1\305\6\10\15\0"+
    "\3\10\1\0\1\10\1\306\27\10\15\0\3\10\1\0"+
    "\16\10\1\307\12\10\15\0\3\10\1\0\2\10\1\310"+
    "\26\10\15\0\3\10\1\0\16\10\1\311\12\10\15\0"+
    "\3\10\1\0\1\10\1\312\27\10\15\0\3\10\1\0"+
    "\1\10\1\313\27\10\15\0\3\10\1\0\15\10\1\314"+
    "\13\10\15\0\3\10\1\0\2\10\1\315\26\10\15\0"+
    "\3\10\1\0\1\316\30\10\15\0\3\10\1\0\2\10"+
    "\1\317\26\10\15\0\3\10\1\0\6\10\1\320\22\10"+
    "\15\0\3\10\1\0\6\10\1\321\22\10\15\0\3\10"+
    "\1\0\17\10\1\322\11\10\15\0\3\10\1\0\2\10"+
    "\1\323\26\10\15\0\3\10\1\0\2\10\1\324\26\10"+
    "\15\0\3\10\1\0\21\10\1\325\7\10\15\0\3\10"+
    "\1\0\4\10\1\326\24\10\15\0\3\10\1\0\22\10"+
    "\1\327\6\10\15\0\3\10\1\0\4\10\1\330\24\10"+
    "\15\0\3\10\1\0\1\10\1\331\27\10\15\0\3\10"+
    "\1\0\6\10\1\332\22\10\15\0\3\10\1\0\22\10"+
    "\1\333\6\10\15\0\3\10\1\0\4\10\1\334\24\10"+
    "\15\0\3\10\1\0\4\10\1\335\24\10\15\0\3\10"+
    "\1\0\5\10\1\336\23\10\15\0\3\10\1\0\3\10"+
    "\1\337\25\10\15\0\3\10\1\0\2\10\1\340\26\10"+
    "\15\0\3\10\1\0\14\10\1\341\14\10\15\0\3\10"+
    "\1\0\2\10\1\342\26\10\15\0\3\10\1\0\4\10"+
    "\1\343\24\10\15\0\3\10\1\0\2\10\1\344\26\10"+
    "\15\0\3\10\1\0\2\10\1\345\26\10\15\0\3\10"+
    "\1\0\4\10\1\346\24\10\15\0\3\10\1\0\1\10"+
    "\1\347\27\10\15\0\3\10\1\0\4\10\1\350\24\10"+
    "\15\0\3\10\1\0\21\10\1\351\7\10\15\0\3\10"+
    "\1\0\4\10\1\352\24\10\15\0\3\10\1\0\3\10"+
    "\1\353\25\10\15\0\3\10\1\0\7\10\1\354\21\10"+
    "\15\0\3\10\1\0\3\10\1\355\25\10\15\0\3\10"+
    "\1\0\2\10\1\356\26\10\15\0\3\10\1\0\11\10"+
    "\1\357\17\10\15\0\3\10\1\0\5\10\1\360\23\10"+
    "\15\0\3\10\1\0\2\10\1\361\26\10\15\0\3\10"+
    "\1\0\2\10\1\362\26\10\15\0\3\10\1\0\16\10"+
    "\1\363\12\10\15\0\3\10\1\0\1\10\1\364\27\10"+
    "\15\0\3\10\1\0\2\10\1\365\26\10\15\0\3\10"+
    "\1\0\6\10\1\366\22\10\15\0\3\10\1\0\2\10"+
    "\1\367\26\10\15\0\3\10\1\0\1\10\1\370\27\10"+
    "\15\0\3\10\1\0\1\10\1\371\27\10\15\0\3\10"+
    "\1\0\2\10\1\372\26\10\15\0\3\10\1\0\1\10"+
    "\1\373\27\10\15\0\3\10\1\0\11\10\1\374\17\10"+
    "\15\0\3\10\1\0\4\10\1\375\24\10\15\0\3\10"+
    "\1\0\21\10\1\376\7\10\15\0\3\10\1\0\6\10"+
    "\1\377\22\10\15\0\3\10\1\0\25\10\1\u0100\3\10"+
    "\15\0\3\10\1\0\1\u0101\30\10\15\0\3\10\1\0"+
    "\6\10\1\u0102\22\10\15\0\3\10\1\0\2\10\1\u0103"+
    "\26\10\15\0\3\10\1\0\2\10\1\u0104\26\10\15\0"+
    "\3\10\1\0\4\10\1\u0105\24\10\15\0\3\10\1\0"+
    "\7\10\1\u0106\21\10\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7896];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\2\11\27\1\5\11\2\1\1\11"+
    "\1\1\1\11\61\1\3\11\253\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  /** A string builder for scanning String-literals. */
  private StringBuilder string = new StringBuilder();
  /** The start-position of the String. */
  private int stringStart;
  
  /** Message */ 
  private static final String END_OF_FILE="End of File";
  
  /** Message */
  private static final String ILLEGAL_CHARACTER="Illegal Character";
  
  /** Message */
  private static final String ILLEGAL_STRING_CONSTANTS="Illegal String Constants";
  
  /**
   * Creates a symbol without value.
   * @param type The type of the symbol.
   * @return A Symbol.
   */
  private Symbol symbol(int type, String name) 
  {
    return new TerminalSymbol(type, name, yyline+1, yycolumn);
  }
  
  /**
   * Creates a symbol with value.
   * @param type The type of the symbol.
   * @param value The value of the symbol.
   * @return A Symbol.
   */
  private Symbol symbol(int type, String name, Object value, int length) 
  {
    return new TerminalSymbol(type, name, yyline+1, yycolumn, value);
  }
    
  /** 
   * This method is called if the scanner cannot scan the input
   */
  private Symbol fail()
  {
    if (yystate() == READ_STRING)
    {
      return symbol(ILLEGAL, ILLEGAL_STRING_CONSTANTS, yytext(), 0);
    } 
    else 
    {
      return symbol(ILLEGAL, ILLEGAL_CHARACTER, yytext(), yytext().length());
    }
  }
  



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2260) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 83: 
          { return symbol(STATEMENT, yytext());
          }
        case 85: break;
        case 63: 
          { return symbol(FLOAT, yytext());
          }
        case 86: break;
        case 75: 
          { return symbol(TRIGGER, yytext());
          }
        case 87: break;
        case 1: 
          { return fail();
          }
        case 88: break;
        case 48: 
          { return symbol(VIEW, yytext());
          }
        case 89: break;
        case 52: 
          { return symbol(FULL, yytext());
          }
        case 90: break;
        case 10: 
          { return symbol(COMMA, yytext());
          }
        case 91: break;
        case 25: 
          { return symbol(GREATER_EQUAL, yytext());
          }
        case 92: break;
        case 80: 
          { return symbol(FOREIGN, yytext());
          }
        case 93: break;
        case 78: 
          { return symbol(DECIMAL, yytext());
          }
        case 94: break;
        case 26: 
          { return symbol(ROW, yytext());
          }
        case 95: break;
        case 65: 
          { return symbol(INSERT, yytext());
          }
        case 96: break;
        case 5: 
          { return symbol(INTEGER_LITERAL, "Integer", Integer.parseInt(yytext()), yytext().length());
          }
        case 97: break;
        case 35: 
          { return symbol(KEY, yytext());
          }
        case 98: break;
        case 11: 
          { return symbol(EQUAL, yytext());
          }
        case 99: break;
        case 42: 
          { return symbol(THEN, yytext());
          }
        case 100: break;
        case 57: 
          { return symbol(INNER, yytext());
          }
        case 101: break;
        case 61: 
          { return symbol(OUTER, yytext());
          }
        case 102: break;
        case 31: 
          { return symbol(SET, yytext());
          }
        case 103: break;
        case 74: 
          { return symbol(EXECUTE, yytext());
          }
        case 104: break;
        case 36: 
          { return symbol(CASE, yytext());
          }
        case 105: break;
        case 47: 
          { return symbol(LEFT, yytext());
          }
        case 106: break;
        case 64: 
          { return symbol(CREATE, yytext());
          }
        case 107: break;
        case 4: 
          { return symbol(IDENTIFIER, "Identifier", yytext(), yytext().length());
          }
        case 108: break;
        case 9: 
          { return symbol(SEMICOLON, yytext());
          }
        case 109: break;
        case 22: 
          { return symbol(ON, yytext());
          }
        case 110: break;
        case 18: 
          { return symbol(NUMBER_LITERAL, "Number", new BigDecimal(yytext()), yytext().length());
          }
        case 111: break;
        case 82: 
          { return symbol(DATETIME, yytext());
          }
        case 112: break;
        case 23: 
          { return symbol(LESS_EQUAL, yytext());
          }
        case 113: break;
        case 37: 
          { return symbol(CLOB, yytext());
          }
        case 114: break;
        case 54: 
          { return symbol(RIGHT, yytext());
          }
        case 115: break;
        case 77: 
          { return symbol(VARCHAR, yytext());
          }
        case 116: break;
        case 69: 
          { return symbol(VALUES, yytext());
          }
        case 117: break;
        case 62: 
          { return symbol(UNION, yytext());
          }
        case 118: break;
        case 70: 
          { return symbol(DELETE, yytext());
          }
        case 119: break;
        case 20: 
          { return symbol(IS, yytext());
          }
        case 120: break;
        case 79: 
          { return symbol(DEFAULT, yytext());
          }
        case 121: break;
        case 38: 
          { return symbol(CHAR, yytext());
          }
        case 122: break;
        case 51: 
          { return symbol(FROM, yytext());
          }
        case 123: break;
        case 29: 
          { return symbol(ALL, yytext());
          }
        case 124: break;
        case 46: 
          { return symbol(BLOB, yytext());
          }
        case 125: break;
        case 2: 
          { yyline++;
          }
        case 126: break;
        case 12: 
          { return symbol(LESS, yytext());
          }
        case 127: break;
        case 40: 
          { return symbol(ELSE, yytext());
          }
        case 128: break;
        case 72: 
          { return symbol(UPDATE, yytext());
          }
        case 129: break;
        case 41: 
          { return symbol(TIME, yytext());
          }
        case 130: break;
        case 68: 
          { return symbol(BIGINT, yytext());
          }
        case 131: break;
        case 33: 
          { return symbol(USE, yytext());
          }
        case 132: break;
        case 43: 
          { return symbol(THIS, yytext());
          }
        case 133: break;
        case 58: 
          { return symbol(INDEX, yytext());
          }
        case 134: break;
        case 16: 
          { yybegin(YYINITIAL); 
                       return symbol(STRING_LITERAL, "String", string.toString(), string.length());
          }
        case 135: break;
        case 14: 
          { string.setLength(0); yybegin(READ_STRING); stringStart = yychar;
          }
        case 136: break;
        case 81: 
          { return symbol(PRIMARY, yytext());
          }
        case 137: break;
        case 73: 
          { return symbol(CASCADE, yytext());
          }
        case 138: break;
        case 49: 
          { return symbol(WHEN, yytext());
          }
        case 139: break;
        case 66: 
          { return symbol(NUMBER, yytext());
          }
        case 140: break;
        case 13: 
          { return symbol(GREATER, yytext());
          }
        case 141: break;
        case 53: 
          { return symbol(JOIN, yytext());
          }
        case 142: break;
        case 28: 
          { return symbol(AND, yytext());
          }
        case 143: break;
        case 45: 
          { return symbol(NULL, yytext());
          }
        case 144: break;
        case 27: 
          { return symbol(END, yytext());
          }
        case 145: break;
        case 19: 
          { return symbol(AS, yytext());
          }
        case 146: break;
        case 8: 
          { return symbol(R_PARENT, yytext());
          }
        case 147: break;
        case 6: 
          { return symbol(DOT, yytext());
          }
        case 148: break;
        case 60: 
          { return symbol(WHERE, yytext());
          }
        case 149: break;
        case 84: 
          { return symbol(REFERENCES, yytext());
          }
        case 150: break;
        case 3: 
          { /* ignore */
          }
        case 151: break;
        case 50: 
          { return symbol(DATE, yytext());
          }
        case 152: break;
        case 24: 
          { return symbol(NOT_EQUAL, yytext());
          }
        case 153: break;
        case 44: 
          { return symbol(INTO, yytext());
          }
        case 154: break;
        case 32: 
          { return symbol(BIT, yytext());
          }
        case 155: break;
        case 55: 
          { return symbol(AFTER, yytext());
          }
        case 156: break;
        case 7: 
          { return symbol(L_PARENT, yytext());
          }
        case 157: break;
        case 76: 
          { return symbol(INTEGER, yytext());
          }
        case 158: break;
        case 15: 
          { string.append( yytext() );
          }
        case 159: break;
        case 67: 
          { return symbol(SELECT, yytext());
          }
        case 160: break;
        case 21: 
          { return symbol(OR, yytext());
          }
        case 161: break;
        case 59: 
          { return symbol(BEGIN, yytext());
          }
        case 162: break;
        case 30: 
          { return symbol(NOT, yytext());
          }
        case 163: break;
        case 17: 
          { String comment;
                    comment = yytext().substring(2);
                    return symbol(COMMENT, "Comment", comment, comment.length());
          }
        case 164: break;
        case 39: 
          { return symbol(EACH, yytext());
          }
        case 165: break;
        case 34: 
          { return symbol(FOR, yytext());
          }
        case 166: break;
        case 56: 
          { return symbol(TABLE, yytext());
          }
        case 167: break;
        case 71: 
          { return symbol(UNIQUE, yytext());
          }
        case 168: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   return symbol(EOF, END_OF_FILE);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
